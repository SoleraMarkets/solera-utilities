/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_aavePool',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_priceOracle',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_maverickV2Router',
        type: 'address',
        internalType: 'address payable',
      },
      {
        name: '_oracleDecimals',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'aavePool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPool',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'calculateBorrowAmount',
    inputs: [
      {
        name: 'supplyAmount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ltv',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'calculateBorrowAmountSingleAsset',
    inputs: [
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'token',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ltv',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'leveragePositionMultiSwap',
    inputs: [
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'path',
        type: 'bytes',
        internalType: 'bytes',
      },
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopParams',
        components: [
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'leveragePositionSingleAsset',
    inputs: [
      {
        name: 'token',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopParams',
        components: [
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'leveragePositionSingleSwap',
    inputs: [
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'maverickPool',
        type: 'address',
        internalType: 'contract IMaverickV2Pool',
      },
      {
        name: 'isSupplyTokenA',
        type: 'bool',
        internalType: 'bool',
      },
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopParams',
        components: [
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'oracleDecimals',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'priceOracle',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPriceOracle',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'swapRouter',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract ISwapRouter',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidHealthFactor',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
] as const;

const _bytecode =
  '0x610100604052348015610010575f80fd5b50604051611ff4380380611ff483398101604081905261002f9161006c565b60015f556001600160a01b0393841660805291831660a05290911660c05260e0526100bc565b6001600160a01b0381168114610069575f80fd5b50565b5f805f806080858703121561007f575f80fd5b845161008a81610055565b602086015190945061009b81610055565b60408601519093506100ac81610055565b6060959095015193969295505050565b60805160a05160c05160e051611e506101a45f395f6101b301525f8181610179015281816105a3015281816105d70152818161065c015281816111620152818161119601526111f901525f818160990152818161078b015261081801525f818161013f01528181610308015281816103eb0152818161041f0152818161044601528181610506015281816108a50152818161096601528181610b4901528181610bc601528181610bfa01528181610c3601528181610cf501528181610f3601528181610fb301528181610fe701528181611023015281816110da01526113380152611e505ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c8063a03e4bc311610063578063a03e4bc31461013a578063a944656214610161578063c31c9c0714610174578063c886a5e81461019b578063e68b52e7146101ae575f80fd5b80632630c12f146100945780632e25bfac146100d8578063327c047e146101065780635582bb2f14610127575b5f80fd5b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100eb6100e63660046118f2565b6101d5565b604080519384526020840192909252908201526060016100cf565b61011961011436600461195c565b610768565b6040519081526020016100cf565b6100eb6101353660046119aa565b610a51565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6100eb61016f366004611a23565b610e0c565b6100bb7f000000000000000000000000000000000000000000000000000000000000000081565b6101196101a9366004611ae8565b611315565b6101197f000000000000000000000000000000000000000000000000000000000000000081565b5f805f60025f54036102025760405162461bcd60e51b81526004016101f990611b22565b60405180910390fd5b60025f908155843590036102295760405163162908e360e11b815260040160405180910390fd5b6102396060850160408601611b59565b61ffff165f0361025c5760405163204ec41160e21b815260040160405180910390fd5b61290461026f6040860160208701611b59565b61ffff1610806102935750614e2061028d6040860160208701611b59565b61ffff16115b156102b15760405163185cfc6d60e11b815260040160405180910390fd5b866001600160a01b0316886001600160a01b0316036102e3576040516333910aef60e11b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b0389811660048301525f9161039d917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f7906024015b602060405180830381865afa15801561034e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103729190611b7a565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b5092935050863591506103bd90506001600160a01b038b16333084611437565b5f805f5b6103d160608a0160408b01611b59565b61ffff168110156106d2576104106001600160a01b038e167f00000000000000000000000000000000000000000000000000000000000000005f6114a8565b6104446001600160a01b038e167f0000000000000000000000000000000000000000000000000000000000000000866114a8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663617ba0378e86335f6040518563ffffffff1660e01b81526004016104969493929190611bba565b5f604051808303815f87803b1580156104ad575f80fd5b505af11580156104bf573d5f803e3d5ffd5b5050505083836104cf9190611bfb565b92505f6104f5858f8f898e60200160208101906104ec9190611b59565b61ffff16610768565b9050805f0361050457506106d2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a415bcad8e8360025f336040518663ffffffff1660e01b8152600401610559959493929190611c0e565b5f604051808303815f87803b158015610570575f80fd5b505af1158015610582573d5f803e3d5ffd5b5050505080836105929190611bfb565b92506105c86001600160a01b038e167f00000000000000000000000000000000000000000000000000000000000000005f6114a8565b6105fc6001600160a01b038e167f0000000000000000000000000000000000000000000000000000000000000000836114a8565b600161060e60608c0160408d01611b59565b6106189190611c42565b61ffff168210156106c9576040516351d882e560e11b81523060048201526001600160a01b038d811660248301528c156044830152606482018390525f60848301527f0000000000000000000000000000000000000000000000000000000000000000169063a3b105ca9060a4016020604051808303815f875af11580156106a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106c69190611c64565b94505b506001016103c1565b506040516370a0823160e01b81523060048201525f906001600160a01b038d16906370a0823190602401602060405180830381865afa158015610717573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073b9190611c64565b90506107516001600160a01b038d1633836115c0565b60015f55919c909b50909950975050505050505050565b60405163b3596f0760e01b81526001600160a01b0385811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa1580156107d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107f49190611c64565b60405163b3596f0760e01b81526001600160a01b0387811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa15801561085d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108819190611c64565b60405163c44b11f760e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa1580156108ea573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090e9190611b7a565b80519091505f9060301c60ff1661092690600a611d5b565b61093890670de0b6b3a7640000611d66565b610942908b611d85565b60405163c44b11f760e01b81526001600160a01b038a811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa1580156109ab573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109cf9190611b7a565b805190915060301c60ff165f6109ff6109f16109ea8c6115f0565b8690611607565b6109fa8b6115f0565b61163d565b90505f610a15610a0f8984611607565b8861163d565b9050670de0b6b3a7640000610a2b84600a611d5b565b610a359083611d85565b610a3f9190611d66565b9e9d5050505050505050505050505050565b5f805f60025f5403610a755760405162461bcd60e51b81526004016101f990611b22565b60025f90815584359003610a9c5760405163162908e360e11b815260040160405180910390fd5b610aac6060850160408601611b59565b61ffff165f03610acf5760405163204ec41160e21b815260040160405180910390fd5b612904610ae26040860160208701611b59565b61ffff161080610b065750614e20610b006040860160208701611b59565b61ffff16115b15610b245760405163185cfc6d60e11b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b0386811660048301525f91610b78917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401610333565b509293505086359150610b9890506001600160a01b038816333084611437565b5f805f5b610bac60608a0160408b01611b59565b61ffff16811015610d7957610beb6001600160a01b038b167f00000000000000000000000000000000000000000000000000000000000000005f6114a8565b610c1f6001600160a01b038b167f0000000000000000000000000000000000000000000000000000000000000000866114a8565b60405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063617ba03790610c71908d90889033905f90600401611bba565b5f604051808303815f87803b158015610c88575f80fd5b505af1158015610c9a573d5f803e3d5ffd5b505050508383610caa9190611bfb565b92505f610ccf858c888d6020016020810190610cc69190611b59565b61ffff16611315565b9050805f03610cde5750610d79565b60405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad90610d33908e9085906002905f903390600401611c0e565b5f604051808303815f87803b158015610d4a575f80fd5b505af1158015610d5c573d5f803e3d5ffd5b505050508083610d6c9190611bfb565b9094509150600101610b9c565b506040516370a0823160e01b81523060048201525f906001600160a01b038b16906370a0823190602401602060405180830381865afa158015610dbe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de29190611c64565b9050610df86001600160a01b038b1633836115c0565b60015f559199909850909650945050505050565b5f805f60025f5403610e305760405162461bcd60e51b81526004016101f990611b22565b60025f90815584359003610e575760405163162908e360e11b815260040160405180910390fd5b610e676060850160408601611b59565b61ffff165f03610e8a5760405163204ec41160e21b815260040160405180910390fd5b612904610e9d6040860160208701611b59565b61ffff161080610ec15750614e20610ebb6040860160208701611b59565b61ffff16115b15610edf5760405163185cfc6d60e11b815260040160405180910390fd5b856001600160a01b0316876001600160a01b031603610f11576040516333910aef60e11b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b0388811660048301525f91610f65917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401610333565b509293505086359150610f8590506001600160a01b038a16333084611437565b5f805f5b610f9960608a0160408b01611b59565b61ffff1681101561128057610fd86001600160a01b038d167f00000000000000000000000000000000000000000000000000000000000000005f6114a8565b61100c6001600160a01b038d167f0000000000000000000000000000000000000000000000000000000000000000866114a8565b60405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063617ba0379061105e908f90889033905f90600401611bba565b5f604051808303815f87803b158015611075575f80fd5b505af1158015611087573d5f803e3d5ffd5b5050505083836110979190611bfb565b92505f6110b4858e8e898e60200160208101906104ec9190611b59565b9050805f036110c35750611280565b60405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad90611118908f9085906002905f903390600401611c0e565b5f604051808303815f87803b15801561112f575f80fd5b505af1158015611141573d5f803e3d5ffd5b5050505080836111519190611bfb565b92506111876001600160a01b038d167f00000000000000000000000000000000000000000000000000000000000000005f6114a8565b6111bb6001600160a01b038d167f0000000000000000000000000000000000000000000000000000000000000000836114a8565b60016111cd60608c0160408d01611b59565b6111d79190611c42565b61ffff168210156112775760405163522ba7eb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063522ba7eb906112349030908f9086905f90600401611dca565b6020604051808303815f875af1158015611250573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112749190611c64565b94505b50600101610f89565b506040516370a0823160e01b81523060048201525f906001600160a01b038c16906370a0823190602401602060405180830381865afa1580156112c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112e99190611c64565b90506112ff6001600160a01b038c1633836115c0565b60015f55919b909a509098509650505050505050565b60405163c44b11f760e01b81526001600160a01b0384811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa15801561137d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113a19190611b7a565b80519091505f9060301c60ff166113b990600a611d5b565b6113cb90670de0b6b3a7640000611d66565b6113d59088611d85565b825190915060301c60ff165f6114006113f76113f0896115f0565b8590611607565b6109fa886115f0565b9050670de0b6b3a764000061141683600a611d5b565b6114209083611d85565b61142a9190611d66565b9998505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526114a29085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611672565b50505050565b8015806115205750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156114fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061151e9190611c64565b155b61158b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f9565b6040516001600160a01b0383166024820152604481018290526115bb90849063095ea7b360e01b9060640161146b565b505050565b6040516001600160a01b0383166024820152604481018290526115bb90849063a9059cbb60e01b9060640161146b565b5f61160182655af3107a4000611d85565b92915050565b5f81156706f05b59d3b200001983900484111517611623575f80fd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a76400006002840419048411171561165b575f80fd5b50670de0b6b3a76400009190910260028204010490565b5f6116c6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117439092919063ffffffff16565b8051909150156115bb57808060200190518101906116e49190611e00565b6115bb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f9565b606061175184845f8561175b565b90505b9392505050565b6060824710156117bc5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f9565b843b61180a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f9565b5f80866001600160a01b031685876040516118259190611e1b565b5f6040518083038185875af1925050503d805f811461185f576040519150601f19603f3d011682016040523d82523d5f602084013e611864565b606091505b509150915061187482828661187f565b979650505050505050565b6060831561188e575081611754565b82511561189e5782518084602001fd5b8160405162461bcd60e51b81526004016101f99190611e31565b6001600160a01b03811681146118cc575f80fd5b50565b80151581146118cc575f80fd5b5f606082840312156118ec575f80fd5b50919050565b5f805f805f60e08688031215611906575f80fd5b8535611911816118b8565b94506020860135611921816118b8565b93506040860135611931816118b8565b92506060860135611941816118cf565b915061195087608088016118dc565b90509295509295909350565b5f805f805f60a08688031215611970575f80fd5b853594506020860135611982816118b8565b93506040860135611992816118b8565b94979396509394606081013594506080013592915050565b5f80608083850312156119bb575f80fd5b82356119c6816118b8565b91506119d584602085016118dc565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a1b57611a1b6119de565b604052919050565b5f805f8060c08587031215611a36575f80fd5b8435611a41816118b8565b9350602085810135611a52816118b8565b9350604086013567ffffffffffffffff80821115611a6e575f80fd5b818801915088601f830112611a81575f80fd5b813581811115611a9357611a936119de565b611aa5601f8201601f191685016119f2565b91508082528984828501011115611aba575f80fd5b80848401858401375f84828401015250809450505050611add86606087016118dc565b905092959194509250565b5f805f8060808587031215611afb575f80fd5b843593506020850135611b0d816118b8565b93969395505050506040820135916060013590565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b5f60208284031215611b69575f80fd5b813561ffff81168114611754575f80fd5b5f60208284031215611b8a575f80fd5b6040516020810181811067ffffffffffffffff82111715611bad57611bad6119de565b6040529151825250919050565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561160157611601611be7565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b61ffff828116828216039080821115611c5d57611c5d611be7565b5092915050565b5f60208284031215611c74575f80fd5b5051919050565b600181815b80851115611cb557815f1904821115611c9b57611c9b611be7565b80851615611ca857918102915b93841c9390800290611c80565b509250929050565b5f82611ccb57506001611601565b81611cd757505f611601565b8160018114611ced5760028114611cf757611d13565b6001915050611601565b60ff841115611d0857611d08611be7565b50506001821b611601565b5060208310610133831016604e8410600b8410161715611d36575081810a611601565b611d408383611c7b565b805f1904821115611d5357611d53611be7565b029392505050565b5f6117548383611cbd565b5f82611d8057634e487b7160e01b5f52601260045260245ffd5b500490565b808202811582820484141761160157611601611be7565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03851681526080602082018190525f90611ded90830186611d9c565b6040830194909452506060015292915050565b5f60208284031215611e10575f80fd5b8151611754816118cf565b5f82518060208501845e5f920191825250919050565b602081525f6117546020830184611d9c56fea164736f6c6343000819000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    ) as Promise<Looping>;
  }
  override getDeployTransaction(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    );
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
