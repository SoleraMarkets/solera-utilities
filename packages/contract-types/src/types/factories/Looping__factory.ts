/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_aavePool',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_priceOracle',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_maverickV2Router',
        type: 'address',
        internalType: 'address payable',
      },
      {
        name: '_oracleDecimals',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'aavePool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPool',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'calculateBorrowAmount',
    inputs: [
      {
        name: 'supplyAmount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ltv',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'leveragePosition',
    inputs: [
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'maverickPool',
        type: 'address',
        internalType: 'contract IMaverickV2Pool',
      },
      {
        name: 'isSupplyTokenA',
        type: 'bool',
        internalType: 'bool',
      },
      {
        name: 'numLoops',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'initialAmount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'oracleDecimals',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'priceOracle',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPriceOracle',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'simulateLeveragePosition',
    inputs: [
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'numLoops',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'initialAmount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: 'totalSupplied',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'totalBorrowed',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'expectedHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'swapRouter',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract ISwapRouter',
      },
    ],
    stateMutability: 'view',
  },
] as const;

const _bytecode =
  '0x610100604052348015610010575f80fd5b506040516114ca3803806114ca83398101604081905261002f9161006c565b60015f556001600160a01b0393841660805291831660a05290911660c05260e0526100bc565b6001600160a01b0381168114610069575f80fd5b50565b5f805f806080858703121561007f575f80fd5b845161008a81610055565b602086015190945061009b81610055565b60408601519093506100ac81610055565b6060959095015193969295505050565b60805160a05160c05160e0516113816101495f395f61017701525f818161013d015281816109ea01528181610a1e0152610a8e01525f818160b6015281816102e9015261037601525f8181610116015281816101c001528181610403015281816104c4015281816107670152818161083301528181610867015281816108be015261096b01526113815ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c8063a03e4bc311610058578063a03e4bc314610111578063c31c9c0714610138578063c4f1953d1461015f578063e68b52e714610172575f80fd5b80630dcc18491461007e5780632630c12f146100b1578063327c047e146100f0575b5f80fd5b61009161008c366004611036565b610199565b604080519384526020840192909252908201526060015b60405180910390f35b6100d87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a8565b6101036100fe366004611083565b6102c6565b6040519081526020016100a8565b6100d87f000000000000000000000000000000000000000000000000000000000000000081565b6100d87f000000000000000000000000000000000000000000000000000000000000000081565b61010361016d3660046110de565b6105af565b6101037f000000000000000000000000000000000000000000000000000000000000000081565b60405163c44b11f760e01b81526001600160a01b0386811660048301525f918291829182917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015610205573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102299190611150565b90505f61025b825161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b5050505090505f8790505f95505f94505f5b898110156102b45761027f82886111b0565b96505f61028f838e8e878d6102c6565b9050805f0361029e57506102b4565b6102a881886111b0565b9650915060010161026d565b50869350505050955095509592505050565b60405163b3596f0760e01b81526001600160a01b0385811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa15801561032e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061035291906111c3565b60405163b3596f0760e01b81526001600160a01b0387811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa1580156103bb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103df91906111c3565b60405163c44b11f760e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015610448573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061046c9190611150565b80519091505f9060301c60ff1661048490600a6112ba565b61049690670de0b6b3a76400006112c5565b6104a0908b6112e4565b60405163c44b11f760e01b81526001600160a01b038a811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015610509573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061052d9190611150565b805190915060301c60ff165f61055d61054f6105488c610b9e565b8690610bb5565b6105588b610b9e565b610beb565b90505f61057361056d8984610bb5565b88610beb565b9050670de0b6b3a764000061058984600a6112ba565b61059390836112e4565b61059d91906112c5565b9e9d5050505050505050505050505050565b5f60025f54036106065760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60025f55826106575760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016105fd565b5f84116106a65760405162461bcd60e51b815260206004820152601c60248201527f4c6f6f7073206d7573742062652067726561746572207468616e20300000000060448201526064016105fd565b6129048210156106f05760405162461bcd60e51b81526020600482015260156024820152744865616c746820666163746f7220746f6f206c6f7760581b60448201526064016105fd565b614e208211156107425760405162461bcd60e51b815260206004820152601f60248201527f4865616c746820666163746f7220756e726561736f6e61626c7920686967680060448201526064016105fd565b60405163c44b11f760e01b81526001600160a01b0389811660048301525f916107fb917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa1580156107ac573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d09190611150565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b5092935086925061081a9150506001600160a01b038b16333084610c20565b5f5b86811015610b0d576108586001600160a01b038c167f00000000000000000000000000000000000000000000000000000000000000005f610c91565b61088c6001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000084610c91565b60405163617ba03760e01b81526001600160a01b038c81166004830152602482018490523360448301525f60648301527f0000000000000000000000000000000000000000000000000000000000000000169063617ba037906084015f604051808303815f87803b1580156108ff575f80fd5b505af1158015610911573d5f803e3d5ffd5b505050505f610923838d8d878a6102c6565b9050805f036109325750610b0d565b60405163a415bcad60e01b81526001600160a01b038c8116600483015260248201839052600260448301525f60648301523360848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a4015f604051808303815f87803b1580156109ac575f80fd5b505af11580156109be573d5f803e3d5ffd5b505050508a6001600160a01b03168c6001600160a01b031614610b0057610a0f6001600160a01b038c167f00000000000000000000000000000000000000000000000000000000000000005f610c91565b610a436001600160a01b038c167f000000000000000000000000000000000000000000000000000000000000000083610c91565b610a4e6001896112fb565b821015610afb576040516351d882e560e11b81523060048201526001600160a01b038b811660248301528a156044830152606482018390525f60848301527f0000000000000000000000000000000000000000000000000000000000000000169063a3b105ca9060a4016020604051808303815f875af1158015610ad4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610af891906111c3565b92505b610b04565b8092505b5060010161081c565b506040516370a0823160e01b81523060048201525f906001600160a01b038b16906370a0823190602401602060405180830381865afa158015610b52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b7691906111c3565b9050610b8c6001600160a01b038b163383610da9565b60015f559a9950505050505050505050565b5f610baf82655af3107a40006112e4565b92915050565b5f81156706f05b59d3b200001983900484111517610bd1575f80fd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715610c09575f80fd5b50670de0b6b3a76400009190910260028204010490565b6040516001600160a01b0380851660248301528316604482015260648101829052610c8b9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610dd9565b50505050565b801580610d095750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610ce3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d0791906111c3565b155b610d745760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016105fd565b6040516001600160a01b038316602482015260448101829052610da490849063095ea7b360e01b90606401610c54565b505050565b6040516001600160a01b038316602482015260448101829052610da490849063a9059cbb60e01b90606401610c54565b5f610e2d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610eaa9092919063ffffffff16565b805190915015610da45780806020019051810190610e4b919061130e565b610da45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fd565b6060610eb884845f85610ec2565b90505b9392505050565b606082471015610f235760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105fd565b843b610f715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fd565b5f80866001600160a01b03168587604051610f8c9190611329565b5f6040518083038185875af1925050503d805f8114610fc6576040519150601f19603f3d011682016040523d82523d5f602084013e610fcb565b606091505b5091509150610fdb828286610fe6565b979650505050505050565b60608315610ff5575081610ebb565b8251156110055782518084602001fd5b8160405162461bcd60e51b81526004016105fd919061133f565b6001600160a01b0381168114611033575f80fd5b50565b5f805f805f60a0868803121561104a575f80fd5b85356110558161101f565b945060208601356110658161101f565b94979496505050506040830135926060810135926080909101359150565b5f805f805f60a08688031215611097575f80fd5b8535945060208601356110a98161101f565b935060408601356110b98161101f565b94979396509394606081013594506080013592915050565b8015158114611033575f80fd5b5f805f805f805f60e0888a0312156110f4575f80fd5b87356110ff8161101f565b9650602088013561110f8161101f565b9550604088013561111f8161101f565b9450606088013561112f816110d1565b9699959850939660808101359560a0820135955060c0909101359350915050565b5f60208284031215611160575f80fd5b6040516020810181811067ffffffffffffffff8211171561118f57634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610baf57610baf61119c565b5f602082840312156111d3575f80fd5b5051919050565b600181815b8085111561121457815f19048211156111fa576111fa61119c565b8085161561120757918102915b93841c93908002906111df565b509250929050565b5f8261122a57506001610baf565b8161123657505f610baf565b816001811461124c576002811461125657611272565b6001915050610baf565b60ff8411156112675761126761119c565b50506001821b610baf565b5060208310610133831016604e8410600b8410161715611295575081810a610baf565b61129f83836111da565b805f19048211156112b2576112b261119c565b029392505050565b5f610ebb838361121c565b5f826112df57634e487b7160e01b5f52601260045260245ffd5b500490565b8082028115828204841417610baf57610baf61119c565b81810381811115610baf57610baf61119c565b5f6020828403121561131e575f80fd5b8151610ebb816110d1565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea164736f6c6343000819000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    ) as Promise<Looping>;
  }
  override getDeployTransaction(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    );
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
