/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace Looping {
  export type LoopMultiSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    borrowToken: string;
    numLoops: BigNumberish;
    initialAmount: BigNumberish;
    minAmountSupplied: BigNumberish;
    path: BytesLike;
  };

  export type LoopMultiSwapParamsStructOutput = [
    string,
    number,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    borrowToken: string;
    numLoops: number;
    initialAmount: BigNumber;
    minAmountSupplied: BigNumber;
    path: string;
  };

  export type LoopSingleAssetParamsStruct = {
    token: string;
    targetHealthFactor: BigNumberish;
    numLoops: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopSingleAssetParamsStructOutput = [
    string,
    number,
    number,
    BigNumber,
  ] & {
    token: string;
    targetHealthFactor: number;
    numLoops: number;
    initialAmount: BigNumber;
  };

  export type LoopSingleSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: BigNumberish;
    maverickPool: string;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopSingleSwapParamsStructOutput = [
    string,
    number,
    boolean,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: number;
    maverickPool: string;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
  };
}

export interface LoopingInterface extends utils.Interface {
  functions: {
    'aavePool()': FunctionFragment;
    'calculateBorrowAmount(uint256,address,address,uint256,uint256)': FunctionFragment;
    'calculateBorrowAmountSingleAsset(uint256,address,uint256,uint256)': FunctionFragment;
    'loopMultiSwap((address,uint16,address,uint16,uint256,uint256,bytes))': FunctionFragment;
    'loopSingleAsset((address,uint16,uint16,uint256))': FunctionFragment;
    'loopSingleSwap((address,uint16,bool,address,uint16,address,uint256,uint256))': FunctionFragment;
    'oracleDecimals()': FunctionFragment;
    'priceOracle()': FunctionFragment;
    'swapRouter()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'aavePool'
      | 'calculateBorrowAmount'
      | 'calculateBorrowAmountSingleAsset'
      | 'loopMultiSwap'
      | 'loopSingleAsset'
      | 'loopSingleSwap'
      | 'oracleDecimals'
      | 'priceOracle'
      | 'swapRouter',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'aavePool', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'calculateBorrowAmount',
    values: [BigNumberish, string, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'calculateBorrowAmountSingleAsset',
    values: [BigNumberish, string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopMultiSwap',
    values: [Looping.LoopMultiSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopSingleAsset',
    values: [Looping.LoopSingleAssetParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopSingleSwap',
    values: [Looping.LoopSingleSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'oracleDecimals',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'priceOracle',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'swapRouter',
    values?: undefined,
  ): string;

  decodeFunctionResult(functionFragment: 'aavePool', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calculateBorrowAmount',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calculateBorrowAmountSingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopMultiSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopSingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopSingleSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'oracleDecimals',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'priceOracle',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'swapRouter', data: BytesLike): Result;

  events: {};
}

export interface Looping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoopingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aavePool(overrides?: CallOverrides): Promise<[string]>;

    calculateBorrowAmount(
      supplyAmount: BigNumberish,
      supplyToken: string,
      borrowToken: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    calculateBorrowAmountSingleAsset(
      amount: BigNumberish,
      token: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    loopMultiSwap(
      params: Looping.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopSingleAsset(
      params: Looping.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopSingleSwap(
      params: Looping.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    oracleDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;
  };

  aavePool(overrides?: CallOverrides): Promise<string>;

  calculateBorrowAmount(
    supplyAmount: BigNumberish,
    supplyToken: string,
    borrowToken: string,
    ltv: BigNumberish,
    targetHealthFactor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  calculateBorrowAmountSingleAsset(
    amount: BigNumberish,
    token: string,
    ltv: BigNumberish,
    targetHealthFactor: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  loopMultiSwap(
    params: Looping.LoopMultiSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopSingleAsset(
    params: Looping.LoopSingleAssetParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopSingleSwap(
    params: Looping.LoopSingleSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aavePool(overrides?: CallOverrides): Promise<string>;

    calculateBorrowAmount(
      supplyAmount: BigNumberish,
      supplyToken: string,
      borrowToken: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateBorrowAmountSingleAsset(
      amount: BigNumberish,
      token: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loopMultiSwap(
      params: Looping.LoopMultiSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    loopSingleAsset(
      params: Looping.LoopSingleAssetParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    loopSingleSwap(
      params: Looping.LoopSingleSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    swapRouter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    aavePool(overrides?: CallOverrides): Promise<BigNumber>;

    calculateBorrowAmount(
      supplyAmount: BigNumberish,
      supplyToken: string,
      borrowToken: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    calculateBorrowAmountSingleAsset(
      amount: BigNumberish,
      token: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    loopMultiSwap(
      params: Looping.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopSingleAsset(
      params: Looping.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopSingleSwap(
      params: Looping.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    oracleDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aavePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateBorrowAmount(
      supplyAmount: BigNumberish,
      supplyToken: string,
      borrowToken: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    calculateBorrowAmountSingleAsset(
      amount: BigNumberish,
      token: string,
      ltv: BigNumberish,
      targetHealthFactor: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    loopMultiSwap(
      params: Looping.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopSingleAsset(
      params: Looping.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopSingleSwap(
      params: Looping.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    oracleDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
