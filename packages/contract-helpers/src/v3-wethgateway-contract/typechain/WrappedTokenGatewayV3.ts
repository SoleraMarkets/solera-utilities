/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace LoopDataTypes {
  export type LoopEntryPLUMEMultiSwapParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    borrowToken: string;
    numLoops: BigNumberish;
    minAmountSupplied: BigNumberish;
    path: BytesLike;
  };

  export type LoopEntryPLUMEMultiSwapParamsStructOutput = [
    number,
    string,
    string,
    number,
    BigNumber,
    string,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    borrowToken: string;
    numLoops: number;
    minAmountSupplied: BigNumber;
    path: string;
  };

  export type LoopDataStruct = {
    supplyAmount: BigNumberish;
    borrowAmount: BigNumberish;
    leftoverBorrowAmount: BigNumberish;
  };

  export type LoopDataStructOutput = [BigNumber, BigNumber, BigNumber] & {
    supplyAmount: BigNumber;
    borrowAmount: BigNumber;
    leftoverBorrowAmount: BigNumber;
  };

  export type LoopEntryPLUMESingleAssetParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
  };

  export type LoopEntryPLUMESingleAssetParamsStructOutput = [
    number,
    string,
    number,
  ] & { targetHealthFactor: number; onBehalfOf: string; numLoops: number };

  export type LoopEntryPLUMESingleSwapParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: BigNumberish;
    maverickPool: string;
    minAmountSupplied: BigNumberish;
  };

  export type LoopEntryPLUMESingleSwapParamsStructOutput = [
    number,
    string,
    boolean,
    string,
    number,
    string,
    BigNumber,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: number;
    maverickPool: string;
    minAmountSupplied: BigNumber;
  };

  export type LoopExitPLUMEMultiSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
    path: BytesLike;
  };

  export type LoopExitPLUMEMultiSwapParamsStructOutput = [
    string,
    number,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
    path: string;
  };

  export type LoopExitPLUMESPLUMEParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopExitPLUMESPLUMEParamsStructOutput = [
    number,
    string,
    number,
    BigNumber,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    initialAmount: BigNumber;
  };

  export type LoopExitPLUMESingleAssetParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopExitPLUMESingleAssetParamsStructOutput = [
    number,
    string,
    number,
    BigNumber,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    initialAmount: BigNumber;
  };

  export type LoopExitPLUMESingleSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    numLoops: BigNumberish;
    maverickPool: string;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopExitPLUMESingleSwapParamsStructOutput = [
    string,
    number,
    string,
    boolean,
    number,
    string,
    BigNumber,
    BigNumber,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    numLoops: number;
    maverickPool: string;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
  };

  export type LoopPLUMESingleAssetParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
  };

  export type LoopPLUMESingleAssetParamsStructOutput = [
    number,
    string,
    number,
  ] & { targetHealthFactor: number; onBehalfOf: string; numLoops: number };
}

export interface WrappedTokenGatewayV3Interface extends utils.Interface {
  functions: {
    'borrowPLUME(address,uint256,uint16)': FunctionFragment;
    'depositPLUME(address,address,uint16)': FunctionFragment;
    'emergencyPlumeTransfer(address,uint256)': FunctionFragment;
    'emergencyTokenTransfer(address,address,uint256)': FunctionFragment;
    'getWPLUMEAddress()': FunctionFragment;
    'loopEntryPLUMEMultiSwap((uint16,address,address,uint16,uint256,bytes))': FunctionFragment;
    'loopEntryPLUMESingleAsset((uint16,address,uint16))': FunctionFragment;
    'loopEntryPLUMESingleSwap((uint16,address,bool,address,uint16,address,uint256))': FunctionFragment;
    'loopExitPLUMEMultiSwap((address,uint16,address,uint16,uint256,uint256,bytes))': FunctionFragment;
    'loopExitPLUMESPLUME((uint16,address,uint16,uint256))': FunctionFragment;
    'loopExitPLUMESingleAsset((uint16,address,uint16,uint256))': FunctionFragment;
    'loopExitPLUMESingleSwap((address,uint16,address,bool,uint16,address,uint256,uint256))': FunctionFragment;
    'loopPLUMESingleAsset((uint16,address,uint16))': FunctionFragment;
    'owner()': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayPLUME(address,uint256,address)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'withdrawPLUME(address,uint256,address)': FunctionFragment;
    'withdrawPLUMEWithPermit(address,uint256,address,uint256,uint8,bytes32,bytes32)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'borrowPLUME'
      | 'depositPLUME'
      | 'emergencyPlumeTransfer'
      | 'emergencyTokenTransfer'
      | 'getWPLUMEAddress'
      | 'loopEntryPLUMEMultiSwap'
      | 'loopEntryPLUMESingleAsset'
      | 'loopEntryPLUMESingleSwap'
      | 'loopExitPLUMEMultiSwap'
      | 'loopExitPLUMESPLUME'
      | 'loopExitPLUMESingleAsset'
      | 'loopExitPLUMESingleSwap'
      | 'loopPLUMESingleAsset'
      | 'owner'
      | 'renounceOwnership'
      | 'repayPLUME'
      | 'transferOwnership'
      | 'withdrawPLUME'
      | 'withdrawPLUMEWithPermit',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'borrowPLUME',
    values: [string, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositPLUME',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyPlumeTransfer',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'emergencyTokenTransfer',
    values: [string, string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getWPLUMEAddress',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'loopEntryPLUMEMultiSwap',
    values: [LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopEntryPLUMESingleAsset',
    values: [LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopEntryPLUMESingleSwap',
    values: [LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopExitPLUMEMultiSwap',
    values: [LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopExitPLUMESPLUME',
    values: [LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopExitPLUMESingleAsset',
    values: [LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopExitPLUMESingleSwap',
    values: [LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopPLUMESingleAsset',
    values: [LoopDataTypes.LoopPLUMESingleAssetParamsStruct],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'repayPLUME',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawPLUME',
    values: [string, BigNumberish, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawPLUMEWithPermit',
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'borrowPLUME',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositPLUME',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyPlumeTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'emergencyTokenTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getWPLUMEAddress',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopEntryPLUMEMultiSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopEntryPLUMESingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopEntryPLUMESingleSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopExitPLUMEMultiSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopExitPLUMESPLUME',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopExitPLUMESingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopExitPLUMESingleSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopPLUMESingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'repayPLUME', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawPLUME',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawPLUMEWithPermit',
    data: BytesLike,
  ): Result;

  events: {
    'OwnershipTransferred(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WrappedTokenGatewayV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WrappedTokenGatewayV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowPLUME(
      arg0: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    depositPLUME(
      arg0: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    emergencyPlumeTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    emergencyTokenTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    getWPLUMEAddress(overrides?: CallOverrides): Promise<[string]>;

    loopEntryPLUMEMultiSwap(
      params: LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopEntryPLUMESingleAsset(
      params: LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopEntryPLUMESingleSwap(
      params: LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopExitPLUMEMultiSwap(
      params: LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopExitPLUMESPLUME(
      params: LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopExitPLUMESingleAsset(
      params: LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopExitPLUMESingleSwap(
      params: LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopPLUMESingleAsset(
      params: LoopDataTypes.LoopPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    repayPLUME(
      arg0: string,
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdrawPLUME(
      arg0: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    withdrawPLUMEWithPermit(
      arg0: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  borrowPLUME(
    arg0: string,
    amount: BigNumberish,
    referralCode: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  depositPLUME(
    arg0: string,
    onBehalfOf: string,
    referralCode: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  emergencyPlumeTransfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  emergencyTokenTransfer(
    token: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  getWPLUMEAddress(overrides?: CallOverrides): Promise<string>;

  loopEntryPLUMEMultiSwap(
    params: LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopEntryPLUMESingleAsset(
    params: LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopEntryPLUMESingleSwap(
    params: LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopExitPLUMEMultiSwap(
    params: LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopExitPLUMESPLUME(
    params: LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopExitPLUMESingleAsset(
    params: LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopExitPLUMESingleSwap(
    params: LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopPLUMESingleAsset(
    params: LoopDataTypes.LoopPLUMESingleAssetParamsStruct,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  repayPLUME(
    arg0: string,
    amount: BigNumberish,
    onBehalfOf: string,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdrawPLUME(
    arg0: string,
    amount: BigNumberish,
    to: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  withdrawPLUMEWithPermit(
    arg0: string,
    amount: BigNumberish,
    to: string,
    deadline: BigNumberish,
    permitV: BigNumberish,
    permitR: BytesLike,
    permitS: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowPLUME(
      arg0: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositPLUME(
      arg0: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyPlumeTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    emergencyTokenTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getWPLUMEAddress(overrides?: CallOverrides): Promise<string>;

    loopEntryPLUMEMultiSwap(
      params: LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopEntryPLUMESingleAsset(
      params: LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopEntryPLUMESingleSwap(
      params: LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopExitPLUMEMultiSwap(
      params: LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopExitPLUMESPLUME(
      params: LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopExitPLUMESingleAsset(
      params: LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopExitPLUMESingleSwap(
      params: LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopPLUMESingleAsset(
      params: LoopDataTypes.LoopPLUMESingleAssetParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayPLUME(
      arg0: string,
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawPLUME(
      arg0: string,
      amount: BigNumberish,
      to: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdrawPLUMEWithPermit(
      arg0: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    borrowPLUME(
      arg0: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    depositPLUME(
      arg0: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    emergencyPlumeTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    emergencyTokenTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    getWPLUMEAddress(overrides?: CallOverrides): Promise<BigNumber>;

    loopEntryPLUMEMultiSwap(
      params: LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    loopEntryPLUMESingleAsset(
      params: LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    loopEntryPLUMESingleSwap(
      params: LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    loopExitPLUMEMultiSwap(
      params: LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopExitPLUMESPLUME(
      params: LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopExitPLUMESingleAsset(
      params: LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopExitPLUMESingleSwap(
      params: LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopPLUMESingleAsset(
      params: LoopDataTypes.LoopPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    repayPLUME(
      arg0: string,
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdrawPLUME(
      arg0: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    withdrawPLUMEWithPermit(
      arg0: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowPLUME(
      arg0: string,
      amount: BigNumberish,
      referralCode: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    depositPLUME(
      arg0: string,
      onBehalfOf: string,
      referralCode: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    emergencyPlumeTransfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    emergencyTokenTransfer(
      token: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    getWPLUMEAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loopEntryPLUMEMultiSwap(
      params: LoopDataTypes.LoopEntryPLUMEMultiSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopEntryPLUMESingleAsset(
      params: LoopDataTypes.LoopEntryPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopEntryPLUMESingleSwap(
      params: LoopDataTypes.LoopEntryPLUMESingleSwapParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopExitPLUMEMultiSwap(
      params: LoopDataTypes.LoopExitPLUMEMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopExitPLUMESPLUME(
      params: LoopDataTypes.LoopExitPLUMESPLUMEParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopExitPLUMESingleAsset(
      params: LoopDataTypes.LoopExitPLUMESingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopExitPLUMESingleSwap(
      params: LoopDataTypes.LoopExitPLUMESingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopPLUMESingleAsset(
      params: LoopDataTypes.LoopPLUMESingleAssetParamsStruct,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    repayPLUME(
      arg0: string,
      amount: BigNumberish,
      onBehalfOf: string,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdrawPLUME(
      arg0: string,
      amount: BigNumberish,
      to: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    withdrawPLUMEWithPermit(
      arg0: string,
      amount: BigNumberish,
      to: string,
      deadline: BigNumberish,
      permitV: BigNumberish,
      permitR: BytesLike,
      permitS: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
