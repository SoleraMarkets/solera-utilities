/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type {
  WrappedTokenGatewayV3,
  WrappedTokenGatewayV3Interface,
} from '../WrappedTokenGatewayV3';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'plume',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_sPLUME',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'owner',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'pool',
        type: 'address',
        internalType: 'contract IPool',
      },
      {
        name: 'loop',
        type: 'address',
        internalType: 'contract ILooping',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'fallback',
    stateMutability: 'payable',
  },
  {
    type: 'receive',
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'borrowPLUME',
    inputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'referralCode',
        type: 'uint16',
        internalType: 'uint16',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'depositPLUME',
    inputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'onBehalfOf',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'referralCode',
        type: 'uint16',
        internalType: 'uint16',
      },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'emergencyPlumeTransfer',
    inputs: [
      {
        name: 'to',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'emergencyTokenTransfer',
    inputs: [
      {
        name: 'token',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'to',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'getWPLUMEAddress',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'loopEntryPLUMEMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopEntryPLUMEMultiSwapParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'loopEntryPLUMESingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopEntryPLUMESingleAssetParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'loopEntryPLUMESingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopEntryPLUMESingleSwapParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'loopExitPLUMEMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopExitPLUMEMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopExitPLUMESPLUME',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopExitPLUMESPLUMEParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopExitPLUMESingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopExitPLUMESingleAssetParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopExitPLUMESingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopExitPLUMESingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopPLUMESingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopPLUMESingleAssetParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'loopData',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'owner',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'renounceOwnership',
    inputs: [],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'repayPLUME',
    inputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'onBehalfOf',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [],
    stateMutability: 'payable',
  },
  {
    type: 'function',
    name: 'transferOwnership',
    inputs: [
      {
        name: 'newOwner',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'withdrawPLUME',
    inputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'to',
        type: 'address',
        internalType: 'address',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'withdrawPLUMEWithPermit',
    inputs: [
      {
        name: '',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'to',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'deadline',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'permitV',
        type: 'uint8',
        internalType: 'uint8',
      },
      {
        name: 'permitR',
        type: 'bytes32',
        internalType: 'bytes32',
      },
      {
        name: 'permitS',
        type: 'bytes32',
        internalType: 'bytes32',
      },
    ],
    outputs: [],
    stateMutability: 'nonpayable',
  },
  {
    type: 'event',
    name: 'OwnershipTransferred',
    inputs: [
      {
        name: 'previousOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
      {
        name: 'newOwner',
        type: 'address',
        indexed: true,
        internalType: 'address',
      },
    ],
    anonymous: false,
  },
  {
    type: 'error',
    name: 'TransferPLUMEFailed',
    inputs: [],
  },
] as const;

const _bytecode =
  '0x610100604052348015610010575f5ffd5b506040516132e03803806132e083398101604081905261002f9161038f565b5f80546001600160a01b031916339081178255604051909182915f5160206132c05f395f51905f52908290a3506001600160a01b0380861660805284811660a05282811660c052811660e0526100848361026f565b60405163095ea7b360e01b81526001600160a01b0383811660048301525f19602483015286169063095ea7b3906044016020604051808303815f875af11580156100d0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f49190610400565b5060405163095ea7b360e01b81526001600160a01b0382811660048301525f19602483015286169063095ea7b3906044016020604051808303815f875af1158015610141573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101659190610400565b5060a0516001600160a01b0316156102655760a05160e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af11580156101c8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ec9190610400565b5060a05160e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561023f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102639190610400565b505b5050505050610426565b5f546001600160a01b031633146102cd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166103325760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102c4565b5f80546040516001600160a01b03808516939216915f5160206132c05f395f51905f5291a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038116811461038c575f5ffd5b50565b5f5f5f5f5f60a086880312156103a3575f5ffd5b85516103ae81610378565b60208701519095506103bf81610378565b60408701519094506103d081610378565b60608701519093506103e181610378565b60808701519092506103f281610378565b809150509295509295909350565b5f60208284031215610410575f5ffd5b8151801515811461041f575f5ffd5b9392505050565b60805160a05160c05160e051612d2561059b5f395f81816104a8015281816109b401528181610a5301528181610ae501528181610d9b01528181610e3a01528181610ecc015281816113fc015281816115cb0152818161172e01528181611a320152611c6801525f81816106aa0152818161085501528181611049015281816112730152818161193f01528181611da601528181611ebd01526120c701525f61158a01525f8181610127015281816103a001528181610438015281816104e30152818161068001528181610820015281816108d601528181610b8001528181610c6c01528181610f320152818161101f0152818161123e015281816112f40152818161138c0152818161143601528181611525015281816116be015281816117680152818161187d015281816118ff015281816119c201528181611a6d01528181611c3a01528181611ca201528181611d5701528181611e1101528181611e930152818161200601526120800152612d255ff3fe608060405260043610610117575f3560e01c80637eee8a221161009f578063b897132511610063578063b897132514610373578063bdbfc22614610392578063cc720c1f146103c4578063e6906a1a146103d7578063f2fde38b146103f657610191565b80637eee8a22146102df5780638da5cb5b146102f2578063a0844be514610322578063a3d5b25514610335578063b834bf3c1461035457610191565b806343a0d7aa116100e657806343a0d7aa146102675780634da896df1461028657806358db7985146102995780636e74c00d146102b8578063715018a6146102cb57610191565b8063037c1d6b146101d057806312188c1d1461020a5780631a62fedc146102295780633b5825761461024857610191565b3661019157336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461018f5760405162461bcd60e51b8152602060048201526013602482015272149958d95a5d99481b9bdd08185b1b1bddd959606a1b60448201526064015b60405180910390fd5b005b60405162461bcd60e51b815260206004820152601460248201527311985b1b189858dac81b9bdd08185b1b1bddd95960621b6044820152606401610186565b6101e36101de3660046124ee565b610415565b60408051825181526020808401519082015291810151908201526060015b60405180910390f35b348015610215575f5ffd5b5061018f610224366004612543565b610669565b348015610234575f5ffd5b506101e3610243366004612582565b610947565b348015610253575f5ffd5b506101e36102623660046125ac565b610d3f565b348015610272575f5ffd5b5061018f6102813660046125e6565b611008565b6101e3610294366004612667565b611369565b3480156102a4575f5ffd5b506101e36102b3366004612691565b61155c565b6101e36102c6366004612667565b61169b565b3480156102d6575f5ffd5b5061018f61180a565b61018f6102ed3660046126ba565b61187b565b3480156102fd575f5ffd5b505f546001600160a01b03165b6040516001600160a01b039091168152602001610201565b6101e36103303660046126f7565b61199f565b348015610340575f5ffd5b5061018f61034f366004612711565b611bca565b34801561035f575f5ffd5b506101e361036e366004612691565b611c0c565b34801561037e575f5ffd5b5061018f61038d36600461274f565b611d48565b34801561039d575f5ffd5b507f000000000000000000000000000000000000000000000000000000000000000061030a565b61018f6103d2366004612543565b611e7c565b3480156103e2575f5ffd5b5061018f6103f1366004612783565b612157565b348015610401575f5ffd5b5061018f6104103660046127ad565b61218e565b61043660405180606001604052805f81526020015f81526020015f81525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b15801561048f575f5ffd5b505af11580156104a1573d5f5f3e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d5b6e4906040518061010001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001855f01602081019061052291906127c8565b61ffff16815260200161053b60608701604088016127ad565b6001600160a01b0316815260200161055960808701606088016127c8565b61ffff16815260200185602001602081019061057591906127ad565b6001600160a01b03168152346020820152608086013560408201526060016105a060a08701876127e3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050509152506040516001600160e01b031960e084901b1681526105f6919060040161285b565b6060604051808303815f875af1158015610612573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106369190612921565b905061066433826040015184604001602081019061065491906127ad565b6001600160a01b03169190612275565b919050565b6040516335ea6a7560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa1580156106f2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107169190612a1b565b61010001516040516370a0823160e01b81523360048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa158015610762573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107869190612b45565b905083600181016107945750805b6040516323b872dd60e01b8152336004820152306024820152604481018290526001600160a01b038416906323b872dd906064016020604051808303815f875af11580156107e4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108089190612b69565b50604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390523060448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec906064016020604051808303815f875af115801561089b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108bf9190612b45565b50604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561091f575f5ffd5b505af1158015610931573d5f5f3e3d5ffd5b5050505061093f84826122fd565b505050505050565b61096860405180606001604052805f81526020015f81526020015f81525090565b610990333060e085013561097f60208701876127ad565b6001600160a01b03169291906123ae565b61099d60208301836127ad565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f6024830152919091169063095ea7b3906044016020604051808303815f875af1158015610a0a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a2e9190612b69565b50610a3c60208301836127ad565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f196024830152919091169063095ea7b3906044016020604051808303815f875af1158015610aaa573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ace9190612b69565b506040805161012081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063da5298419080610b1a60208701876127ad565b6001600160a01b03168152602001856020016020810190610b3b91906127c8565b61ffff168152602001610b5460608701604088016127ad565b6001600160a01b03168152602001610b726080870160608801612b84565b151581526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166020820152604001610bb860a08701608088016127c8565b61ffff168152602001610bd160c0870160a088016127ad565b6001600160a01b031681526020018560c0013581526020018560e001358152506040518263ffffffff1660e01b8152600401610c0d9190612b9f565b6060604051808303815f875af1158015610c29573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c4d9190612921565b6040808201519051632e1a7d4d60e01b81529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691632e1a7d4d91610ca39160040190815260200190565b5f604051808303815f87803b158015610cba575f5ffd5b505af1158015610ccc573d5f5f3e3d5ffd5b5050505060408181015190515f9133918381818185875af1925050503d805f8114610d12576040519150601f19603f3d011682016040523d82523d5f602084013e610d17565b606091505b5050905080610d39576040516305f88b0960e01b815260040160405180910390fd5b50919050565b610d6060405180606001604052805f81526020015f81526020015f81525090565b610d77333060a085013561097f60208701876127ad565b610d8460208301836127ad565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f6024830152919091169063095ea7b3906044016020604051808303815f875af1158015610df1573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e159190612b69565b50610e2360208301836127ad565b60405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f196024830152919091169063095ea7b3906044016020604051808303815f875af1158015610e91573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eb59190612b69565b506040805161010081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d5b6e4909080610f0160208701876127ad565b6001600160a01b03168152602001856020016020810190610f2291906127c8565b61ffff1681526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166020820152604001610f6a60808701606088016127c8565b61ffff168152602001610f8360608701604088016127ad565b6001600160a01b0316815260a0860135602082015260808601356040820152606001610fb260c08701876127e3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050509152506040516001600160e01b031960e084901b168152610c0d919060040161285b565b6040516335ea6a7560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015611091573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110b59190612a1b565b61010001516040516370a0823160e01b81523360048201529091505f906001600160a01b038316906370a0823190602401602060405180830381865afa158015611101573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111259190612b45565b905087600181016111335750805b60405163d505accf60e01b8152336004820152306024820152604481018a90526064810188905260ff8716608482015260a4810186905260c481018590526001600160a01b0384169063d505accf9060e4015f604051808303815f87803b15801561119c575f5ffd5b505af11580156111ae573d5f5f3e3d5ffd5b50506040516323b872dd60e01b8152336004820152306024820152604481018490526001600160a01b03861692506323b872dd91506064016020604051808303815f875af1158015611202573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112269190612b69565b50604051631a4ca37b60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390523060448301527f000000000000000000000000000000000000000000000000000000000000000016906369328dec906064016020604051808303815f875af11580156112b9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112dd9190612b45565b50604051632e1a7d4d60e01b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561133d575f5ffd5b505af115801561134f573d5f5f3e3d5ffd5b5050505061135d88826122fd565b50505050505050505050565b61138a60405180606001604052805f81526020015f81526020015f81525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b1580156113e3575f5ffd5b505af11580156113f5573d5f5f3e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b809dee6040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001855f01602081019061147591906127c8565b61ffff16815260200185602001602081019061149191906127ad565b6001600160a01b031681526020016114af60608701604088016127c8565b61ffff168152602001348152506040518263ffffffff1660e01b81526004016114d89190612c57565b6060604051808303815f875af11580156114f4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115189190612921565b90506106643382604001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166122759092919063ffffffff16565b61157d60405180606001604052805f81526020015f81526020015f81525090565b6115b66001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333060608601356123ae565b60408051608081019091526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063de1b7a8d908061160060208701876127c8565b61ffff16815260200185602001602081019061161c91906127ad565b6001600160a01b0316815260200161163a60608701604088016127c8565b61ffff9081168252606080880135602093840152604080516001600160e01b031960e088901b168152855184166004820152938501516001600160a01b03166024850152840151909116604483015291909101516064820152608401610c0d565b6116bc60405180606001604052805f81526020015f81526020015f81525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b158015611715575f5ffd5b505af1158015611727573d5f5f3e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b809dee6040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001855f0160208101906117a791906127c8565b61ffff1681526020018560200160208101906117c391906127ad565b6001600160a01b031681526020016117e160608701604088016127c8565b61ffff168152602001348152506040518263ffffffff1660e01b8152600401610c0d9190612c57565b5f546001600160a01b031633146118335760405162461bcd60e51b815260040161018690612ca8565b5f80546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a35f80546001600160a01b0319169055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b1580156118d4575f5ffd5b505af11580156118e6573d5f5f3e3d5ffd5b505060405163e8eda9df60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152346024830152868116604483015261ffff861660648301527f000000000000000000000000000000000000000000000000000000000000000016935063e8eda9df925060840190505f604051808303815f87803b158015611984575f5ffd5b505af1158015611996573d5f5f3e3d5ffd5b50505050505050565b6119c060405180606001604052805f81526020015f81526020015f81525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004015f604051808303818588803b158015611a19575f5ffd5b505af1158015611a2b573d5f5f3e3d5ffd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5298416040518061012001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001855f016020810190611aac91906127c8565b61ffff168152602001856020016020810190611ac891906127ad565b6001600160a01b03168152602001611ae66060870160408801612b84565b15158152602001611afd60808701606088016127ad565b6001600160a01b03168152602001611b1b60a08701608088016127c8565b61ffff168152602001611b3460c0870160a088016127ad565b6001600160a01b031681526020018560c001358152602001348152506040518263ffffffff1660e01b8152600401611b6c9190612b9f565b6060604051808303815f875af1158015611b88573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bac9190612921565b905061066433826040015184606001602081019061065491906127ad565b5f546001600160a01b03163314611bf35760405162461bcd60e51b815260040161018690612ca8565b611c076001600160a01b0384168383612275565b505050565b611c2d60405180606001604052805f81526020015f81526020015f81525090565b611c666001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333060608601356123ae565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b809dee6040518060a001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001855f016020810190611ce191906127c8565b61ffff168152602001856020016020810190611cfd91906127ad565b6001600160a01b03168152602001611d1b60608701604088016127c8565b61ffff16815260200185606001358152506040518263ffffffff1660e01b8152600401610c0d9190612c57565b60405163a415bcad60e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166004830152602482018490526002604483015261ffff831660648301523360848301527f0000000000000000000000000000000000000000000000000000000000000000169063a415bcad9060a4015f604051808303815f87803b158015611de7575f5ffd5b505af1158015611df9573d5f5f3e3d5ffd5b5050604051632e1a7d4d60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169250632e1a7d4d91506024015f604051808303815f87803b158015611e5c575f5ffd5b505af1158015611e6e573d5f5f3e3d5ffd5b50505050611c0733836122fd565b6040516335ea6a7560e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015611f05573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f299190612a1b565b61014001516040516370a0823160e01b81526001600160a01b038481166004830152909116906370a0823190602401602060405180830381865afa158015611f73573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f979190612b45565b905080831015611fa45750815b803410156120045760405162461bcd60e51b815260206004820152602760248201527f6d73672e76616c7565206973206c657373207468616e2072657061796d656e7460448201526608185b5bdd5b9d60ca1b6064820152608401610186565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004015f604051808303818588803b15801561205d575f5ffd5b505af115801561206f573d5f5f3e3d5ffd5b505060405163573ade8160e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b039081166004830152602482018690526002604483015286811660648301527f000000000000000000000000000000000000000000000000000000000000000016935063573ade81925060840190506020604051808303815f875af1158015612111573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121359190612b45565b5080341115612151576121513361214c8334612cdd565b6122fd565b50505050565b5f546001600160a01b031633146121805760405162461bcd60e51b815260040161018690612ca8565b61218a82826122fd565b5050565b5f546001600160a01b031633146121b75760405162461bcd60e51b815260040161018690612ca8565b6001600160a01b03811661221c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610186565b5f80546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35f80546001600160a01b0319166001600160a01b0392909216919091179055565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af16122af573d5f5f3e3d5ffd5b506122b98461244d565b6121515760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b6044820152606401610186565b604080515f808252602082019092526001600160a01b0384169083906040516123269190612d02565b5f6040518083038185875af1925050503d805f8114612360576040519150601f19603f3d011682016040523d82523d5f602084013e612365565b606091505b5050905080611c075760405162461bcd60e51b8152602060048201526015602482015274141315535157d514905394d1915497d19052531151605a1b6044820152606401610186565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af16123f0573d5f5f3e3d5ffd5b506123fa8561244d565b6124465760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610186565b5050505050565b5f61246f565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d80156124ae57602081146124df576124a97f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612453565b610d39565b823b6124d6576124d67311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612453565b60019150610d39565b3d5f5f3e50505f511515919050565b5f602082840312156124fe575f5ffd5b813567ffffffffffffffff811115612514575f5ffd5b820160c08185031215612525575f5ffd5b9392505050565b6001600160a01b0381168114612540575f5ffd5b50565b5f5f5f60608486031215612555575f5ffd5b83356125608161252c565b92506020840135915060408401356125778161252c565b809150509250925092565b5f610100828403128015612594575f5ffd5b509092915050565b5f60e08284031215610d39575f5ffd5b5f602082840312156125bc575f5ffd5b813567ffffffffffffffff8111156125d2575f5ffd5b6125de8482850161259c565b949350505050565b5f5f5f5f5f5f5f60e0888a0312156125fc575f5ffd5b87356126078161252c565b965060208801359550604088013561261e8161252c565b945060608801359350608088013560ff8116811461263a575f5ffd5b9699959850939692959460a0840135945060c09093013592915050565b5f60608284031215610d39575f5ffd5b5f60608284031215612677575f5ffd5b6125258383612657565b5f60808284031215610d39575f5ffd5b5f608082840312156126a1575f5ffd5b6125258383612681565b61ffff81168114612540575f5ffd5b5f5f5f606084860312156126cc575f5ffd5b83356126d78161252c565b925060208401356126e78161252c565b91506040840135612577816126ab565b5f60e08284031215612707575f5ffd5b612525838361259c565b5f5f5f60608486031215612723575f5ffd5b833561272e8161252c565b9250602084013561273e8161252c565b929592945050506040919091013590565b5f5f5f60608486031215612761575f5ffd5b833561276c8161252c565b9250602084013591506040840135612577816126ab565b5f5f60408385031215612794575f5ffd5b823561279f8161252c565b946020939093013593505050565b5f602082840312156127bd575f5ffd5b81356125258161252c565b5f602082840312156127d8575f5ffd5b8135612525816126ab565b5f5f8335601e198436030181126127f8575f5ffd5b83018035915067ffffffffffffffff821115612812575f5ffd5b602001915036819003821315612826575f5ffd5b9250929050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6020815260018060a01b03825116602082015261ffff60208301511660408201525f604083015161289760608401826001600160a01b03169052565b50606083015161ffff811660808401525060808301516001600160a01b03811660a08401525060a083015160c083015260c083015160e083015260e0830151610100808401526125de61012084018261282d565b6040516101e0810167ffffffffffffffff8111828210171561291b57634e487b7160e01b5f52604160045260245ffd5b60405290565b5f6060828403128015612932575f5ffd5b506040516060810167ffffffffffffffff8111828210171561296257634e487b7160e01b5f52604160045260245ffd5b60409081528351825260208085015190830152928301519281019290925250919050565b5f60208284031215612996575f5ffd5b6040516020810167ffffffffffffffff811182821017156129c557634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114610664575f5ffd5b805164ffffffffff81168114610664575f5ffd5b8051610664816126ab565b80516106648161252c565b5f6101e0828403128015612a2d575f5ffd5b50612a366128eb565b612a408484612986565b8152612a4e602084016129d2565b6020820152612a5f604084016129d2565b6040820152612a70606084016129d2565b6060820152612a81608084016129d2565b6080820152612a9260a084016129d2565b60a0820152612aa360c084016129f1565b60c0820152612ab460e08401612a05565b60e0820152612ac66101008401612a10565b610100820152612ad96101208401612a10565b610120820152612aec6101408401612a10565b610140820152612aff6101608401612a10565b610160820152612b1261018084016129d2565b610180820152612b256101a084016129d2565b6101a0820152612b386101c084016129d2565b6101c08201529392505050565b5f60208284031215612b55575f5ffd5b5051919050565b8015158114612540575f5ffd5b5f60208284031215612b79575f5ffd5b815161252581612b5c565b5f60208284031215612b94575f5ffd5b813561252581612b5c565b81516001600160a01b0316815260208083015161ffff1690820152604080830151610120830191612bda908401826001600160a01b03169052565b506060830151612bee606084018215159052565b506080830151612c0960808401826001600160a01b03169052565b5060a0830151612c1f60a084018261ffff169052565b5060c0830151612c3a60c08401826001600160a01b03169052565b5060e083015160e083015261010083015161010083015292915050565b5f60a08201905060018060a01b03835116825261ffff602084015116602083015260018060a01b03604084015116604083015261ffff60608401511660608301526080830151608083015292915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b81810381811115612cfc57634e487b7160e01b5f52601160045260245ffd5b92915050565b5f82518060208501845e5f92019182525091905056fea164736f6c634300081c000a8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0';

type WrappedTokenGatewayV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WrappedTokenGatewayV3ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WrappedTokenGatewayV3__factory extends ContractFactory {
  constructor(...args: WrappedTokenGatewayV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    plume: string,
    _sPLUME: string,
    owner: string,
    pool: string,
    loop: string,
    overrides?: Overrides & { from?: string },
  ): Promise<WrappedTokenGatewayV3> {
    return super.deploy(
      plume,
      _sPLUME,
      owner,
      pool,
      loop,
      overrides || {},
    ) as Promise<WrappedTokenGatewayV3>;
  }
  override getDeployTransaction(
    plume: string,
    _sPLUME: string,
    owner: string,
    pool: string,
    loop: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      plume,
      _sPLUME,
      owner,
      pool,
      loop,
      overrides || {},
    );
  }
  override attach(address: string): WrappedTokenGatewayV3 {
    return super.attach(address) as WrappedTokenGatewayV3;
  }
  override connect(signer: Signer): WrappedTokenGatewayV3__factory {
    return super.connect(signer) as WrappedTokenGatewayV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WrappedTokenGatewayV3Interface {
    return new utils.Interface(_abi) as WrappedTokenGatewayV3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): WrappedTokenGatewayV3 {
    return new Contract(
      address,
      _abi,
      signerOrProvider,
    ) as WrappedTokenGatewayV3;
  }
}
