/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface, LoopDataTypes } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopConstructorParams',
        components: [
          {
            name: 'aavePool',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'priceOracle',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'swapRouter',
            type: 'address',
            internalType: 'contract ISwapRouter',
          },
          {
            name: 'oracleDecimals',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'pUSD',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nALPHA',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nINSTO',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nBASIS',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nETF',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nALPHATeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nINSTOTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nBASISTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nETFTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'sPLUME',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'WPLUME',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNALPHA',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNALPHAParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNBASIS',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNBASISParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNETF',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNETFParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNINSTO',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNINSTOParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSPLUME',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSPLUMEParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'simulateLoop',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSimulationParams',
        components: [
          {
            name: 'supply',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'borrow',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: 'data',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'error',
    name: 'InsufficientFundsToCompleteLoops',
    inputs: [
      {
        name: 'failedAtLoop',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x610260604052348015610010575f5ffd5b506040516142e33803806142e383398101604081905261002f91610753565b60015f5580516001600160a01b0390811660809081526020830151821660a09081526040840151831660c0908152606085015160e09081529285015184166101009081529185015184166101208181529186015185166101409081529386015185166101609081529286015185166101809081529186015185166101a09081529386015185166101c09081529286015185166101e052908501518416610200529184015183166102205283015190911661024052156101d8576101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561013a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061015e9190610875565b506101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156101b2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101d69190610875565b505b610140516001600160a01b0316156102da576101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561023c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102609190610875565b506101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156102b4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d89190610875565b505b610160516001600160a01b0316156103dc576101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561033e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103629190610875565b506101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156103b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103da9190610875565b505b610180516001600160a01b0316156104de576101805160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610440573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104649190610875565b506101805160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156104b8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104dc9190610875565b505b610220516001600160a01b0316156105e0576102205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610542573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105669190610875565b506102205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156105ba573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105de9190610875565b505b610240516001600160a01b0316158015906106065750610220516001600160a01b031615155b156106fd57610240516102205160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561065e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106829190610875565b50610240516102205160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156106d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106fb9190610875565b505b5061089b565b6040516101e081016001600160401b038111828210171561073257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811461074e575f5ffd5b919050565b5f6101e0828403128015610765575f5ffd5b5061076e610703565b61077783610738565b815261078560208401610738565b602082015261079660408401610738565b6040820152606083810151908201526107b160808401610738565b60808201526107c260a08401610738565b60a08201526107d360c08401610738565b60c08201526107e460e08401610738565b60e08201526107f66101008401610738565b6101008201526108096101208401610738565b61012082015261081c6101408401610738565b61014082015261082f6101608401610738565b6101608201526108426101808401610738565b6101808201526108556101a08401610738565b6101a08201526108686101c08401610738565b6101c08201529392505050565b5f60208284031215610885575f5ffd5b81518015158114610894575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051613822610ac15f395f81816121c90152818161235e0152818161254501526126be01525f818161211d01528181612273015281816122b201528181612444015261262001525f61067c01525f61079b01525f610def01525f61085601525f61065701525f61077601525f610dca01525f61083101525f81816129ed01528181612bd601528181612d9401528181612e3b01528181612ece0152612fb001525f50505f818161150c015281816115aa0152818161163201528181611e0c01528181611eaa0152611f3201525f8181610337015281816103dc015281816111c00152818161126501528181611ad801528181611b7d015281816122dc0152818161238b01528181612b560152612c0301525f81816101ea0152818161028f0152818161093e01528181610a1e01528181610ab901528181610b6201528181610c4d01528181610f2401528181610fc90152818161109b0152818161113601528181611329015281816114170152818161183b015281816118e0015281816119b301528181611a4e01528181611c4101528181611d1701528181612147015281816121f60152818161241d015281816125160152818161271e015281816127ba01528181612a1701528181612aa801528181612c9e01528181612d67015281816130a4015261314001526138225ff3fe608060405234801561000f575f5ffd5b5060043610610090575f3560e01c80637b809dee116100635780637b809dee1461010657806391f7d0e214610119578063d5b6e4901461012c578063da5298411461013f578063de1b7a8d14610152575f5ffd5b80630b799a30146100945780630d848ae4146100cd57806339dfc569146100e05780637454701e146100f3575b5f5ffd5b6100a76100a236600461335a565b610165565b604080518251815260208084015190820152918101519082015260600160405180910390f35b6100a76100db36600461335a565b6105fd565b6100a76100ee36600461335a565b61071c565b6100a761010136600461335a565b6107d7565b6100a761011436600461335a565b610892565b6100a761012736600461335a565b610d70565b6100a761013a36600461337b565b610e2b565b6100a761014d3660046133b3565b611741565b6100a76101603660046133cd565b612065565b61018660405180606001604052805f81526020015f81526020015f81525090565b81608001355f036101aa5760405163162908e360e11b815260040160405180910390fd5b60026101bc60808401606085016133f0565b61ffff1610156101df5760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761021c602086018661341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561025e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610282919061343a565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76102c4604087016020880161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610306573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061032a919061343a565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07610369602088018861341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103ab573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cf9190613488565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f076104116040890160208a0161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610453573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104779190613488565b905060808601355f5b6104906080890160608a016133f0565b61ffff168110156105f25781875f018181516104ac91906134b3565b915081815250505f6104d93384878a888b8f60400160208101906104d091906133f0565b61ffff166126e6565b9050805f03610512576104ed8260016134b3565b60405163235ffc1f60e01b815260040161050991815260200190565b60405180910390fd5b808860200181815161052491906134b3565b905250855160301c60ff1661053a90600a6135af565b61054c90670de0b6b3a76400006135ba565b875160301c60ff1661055f90600a6135af565b6105a561058e610577670de0b6b3a7640000866135ba565b610589670de0b6b3a76400008a6135ba565b6128fc565b6105a0670de0b6b3a76400008a6135ba565b612932565b6105af91906135ba565b6105b991906135d1565b925060016105cd60808b0160608c016133f0565b6105d791906135f0565b61ffff1682036105e957604088018190525b50600101610480565b505050505050919050565b61061e60405180606001604052805f81526020015f81526020015f81525090565b60025f540361063f5760405162461bcd60e51b81526004016105099061360a565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610712928201906106b8908601866133f0565b61ffff1681526020018460200160208101906106d4919061341f565b6001600160a01b031681526020016106f260608601604087016133f0565b61ffff168152602001846060013581526020018460800135815250612967565b60015f5592915050565b61073d60405180606001604052805f81526020015f81526020015f81525090565b60025f540361075e5760405162461bcd60e51b81526004016105099061360a565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610712928201906106b8908601866133f0565b6107f860405180606001604052805f81526020015f81526020015f81525090565b60025f54036108195760405162461bcd60e51b81526004016105099061360a565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610712928201906106b8908601866133f0565b6108b360405180606001604052805f81526020015f81526020015f81525090565b60025f54036108d45760405162461bcd60e51b81526004016105099061360a565b60025f908155608083013590036108fe5760405163162908e360e11b815260040160405180910390fd5b600261091060808401606085016133f0565b61ffff1610156109335760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610970602086018661341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156109b2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d6919061343a565b90506080830135610a013330836109f0602089018961341f565b6001600160a01b0316929190612fe2565b610a0e602085018561341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610a5b929190613641565b6020604051808303815f875af1158015610a77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a9b9190613667565b50610aa9602085018561341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401610af7929190613641565b6020604051808303815f875af1158015610b13573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b379190613667565b505f8080805b610b4d6080890160608a016133f0565b61ffff16811015610d28576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610b9460208b018b61341f565b87610ba560608d0160408e0161341f565b5f6040518563ffffffff1660e01b8152600401610bc59493929190613682565b5f604051808303815f87803b158015610bdc575f5ffd5b505af1158015610bee573d5f5f3e3d5ffd5b505050508484610bfe91906134b3565b93505f610c2f610c1460608b0160408c0161341f565b8789610c2660408e0160208f016133f0565b61ffff16613081565b9050805f03610c43576104ed8260016134b3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad610c7f60208c018c61341f565b8360025f8e6040016020810190610c96919061341f565b6040518663ffffffff1660e01b8152600401610cb69594939291906136af565b5f604051808303815f87803b158015610ccd575f5ffd5b505af1158015610cdf573d5f5f3e3d5ffd5b505050508084610cef91906134b3565b9095509250846001610d0760808b0160608c016133f0565b610d1191906135f0565b61ffff168203610d1f578092505b50600101610b3d565b50610d4b3382610d3b60208b018b61341f565b6001600160a01b03169190613219565b6040805160608101825293845260208401929092529082015260015f55949350505050565b610d9160405180606001604052805f81526020015f81526020015f81525090565b60025f5403610db25760405162461bcd60e51b81526004016105099061360a565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610712928201906106b8908601866133f0565b610e4c60405180606001604052805f81526020015f81526020015f81525090565b60025f5403610e6d5760405162461bcd60e51b81526004016105099061360a565b60025f90815560a08301359003610e975760405163162908e360e11b815260040160405180910390fd5b6002610ea960808401606085016133f0565b61ffff161015610ecc5760405163204ec41160e21b815260040160405180910390fd5b610edc606083016040840161341f565b6001600160a01b0316610ef2602084018461341f565b6001600160a01b031603610f19576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610f56602086018661341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f98573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fbc919061343a565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610ffe606087016040880161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611040573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611064919061343a565b905060a084013561107e3330836109f060208a018a61341f565b61108b602086018661341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016110d8929190613641565b6020604051808303815f875af11580156110f4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111189190613667565b50611126602086018661341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401611174929190613641565b6020604051808303815f875af1158015611190573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111b49190613667565b505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f076111f2602089018961341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611234573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112589190613488565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f0761129a60608a0160408b0161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156112dc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113009190613488565b90505f5b6113146080890160608a016133f0565b61ffff168110156116df576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761135b60208b018b61341f565b8661136c60a08d0160808e0161341f565b5f6040518563ffffffff1660e01b815260040161138c9493929190613682565b5f604051808303815f87803b1580156113a3575f5ffd5b505af11580156113b5573d5f5f3e3d5ffd5b5050505083875f018181516113ca91906134b3565b9052505f6113f96113e160a08b0160808c0161341f565b86868a878b8f60200160208101906104d091906133f0565b9050805f0361140d576104ed8260016134b3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61144c60608c0160408d0161341f565b8360025f8e6080016020810190611463919061341f565b6040518663ffffffff1660e01b81526004016114839594939291906136af565b5f604051808303815f87803b15801561149a575f5ffd5b505af11580156114ac573d5f5f3e3d5ffd5b5050505080886020018181516114c291906134b3565b90525060016114d760808b0160608c016133f0565b6114e191906135f0565b61ffff168210156116ce576114fc60608a0160408b0161341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401611549929190613641565b6020604051808303815f875af1158015611565573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115899190613667565b5061159a60608a0160408b0161341f565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016115e7929190613641565b6020604051808303815f875af1158015611603573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116279190613667565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061166560e08d018d6136e3565b855f6040518663ffffffff1660e01b815260040161168795949392919061372d565b6020604051808303815f875af11580156116a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116c79190613488565b94506116d6565b604088018190525b50600101611304565b50855160c0880135111561171657855160405163593100b560e11b8152600481019190915260c08801356024820152604401610509565b611732338760400151896040016020810190610d3b919061341f565b505060015f5550919392505050565b61176260405180606001604052805f81526020015f81526020015f81525090565b60025f54036117835760405162461bcd60e51b81526004016105099061360a565b60025f90815561010083013590036117ae5760405163162908e360e11b815260040160405180910390fd5b60026117c060c0840160a085016133f0565b61ffff1610156117e35760405163204ec41160e21b815260040160405180910390fd5b6117f360a083016080840161341f565b6001600160a01b0316611809602084018461341f565b6001600160a01b031603611830576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761186d602086018661341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156118af573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118d3919061343a565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761191560a087016080880161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611957573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061197b919061343a565b90506101008401356119963330836109f060208a018a61341f565b6119a3602086018661341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016119f0929190613641565b6020604051808303815f875af1158015611a0c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a309190613667565b50611a3e602086018661341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401611a8c929190613641565b6020604051808303815f875af1158015611aa8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611acc9190613667565b505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07611b0a602089018961341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611b4c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b709190613488565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07611bb260a08a0160808b0161341f565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611bf4573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c189190613488565b90505f5b611c2c60c0890160a08a016133f0565b61ffff16811015612013576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037611c7360208b018b61341f565b86611c8460608d0160408e0161341f565b5f6040518563ffffffff1660e01b8152600401611ca49493929190613682565b5f604051808303815f87803b158015611cbb575f5ffd5b505af1158015611ccd573d5f5f3e3d5ffd5b5050505083875f01818151611ce291906134b3565b9052505f611cf96113e160608b0160408c0161341f565b9050805f03611d0d576104ed8260016134b3565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad611d4c60a08c0160808d0161341f565b8360025f8e6040016020810190611d63919061341f565b6040518663ffffffff1660e01b8152600401611d839594939291906136af565b5f604051808303815f87803b158015611d9a575f5ffd5b505af1158015611dac573d5f5f3e3d5ffd5b505050508088602001818151611dc291906134b3565b9052506001611dd760c08b0160a08c016133f0565b611de191906135f0565b61ffff1682101561200257611dfc60a08a0160808b0161341f565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401611e49929190613641565b6020604051808303815f875af1158015611e65573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e899190613667565b50611e9a60a08a0160808b0161341f565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611ee7929190613641565b6020604051808303815f875af1158015611f03573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f279190613667565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca30611f6860e08d0160c08e0161341f565b611f7860808e0160608f0161377c565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af1158015611fd7573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ffb9190613488565b945061200a565b604088018190525b50600101611c1c565b50855160e0880135111561204a57855160405163593100b560e11b8152600481019190915260e08801356024820152604401610509565b6040860151611732903390610d3b60a08b0160808c0161341f565b61208660405180606001604052805f81526020015f81526020015f81525090565b60025f54036120a75760405162461bcd60e51b81526004016105099061360a565b60025f908155606083013590036120d15760405163162908e360e11b815260040160405180910390fd5b60026120e360608401604085016133f0565b61ffff1610156121065760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa15801561218e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121b2919061343a565b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa15801561223b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061225f919061343a565b9050606084013561229b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612fe2565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612323573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123479190613488565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa1580156123d0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123f49190613488565b90505f5b6124086060890160408a016133f0565b61ffff168110156126aa576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0377f00000000000000000000000000000000000000000000000000000000000000008661247460408d0160208e0161341f565b5f6040518563ffffffff1660e01b81526004016124949493929190613682565b5f604051808303815f87803b1580156124ab575f5ffd5b505af11580156124bd573d5f5f3e3d5ffd5b5050505083875f018181516124d291906134b3565b9052505f6125006124e960408b0160208c0161341f565b86868a878b8f5f0160208101906104d091906133f0565b9050805f03612514576104ed8260016134b3565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a415bcad7f00000000000000000000000000000000000000000000000000000000000000008360025f8e602001602081019061257b919061341f565b6040518663ffffffff1660e01b815260040161259b9594939291906136af565b5f604051808303815f87803b1580156125b2575f5ffd5b505af11580156125c4573d5f5f3e3d5ffd5b5050505080886020018181516125da91906134b3565b90525060016125ef60608b0160408c016133f0565b6125f991906135f0565b61ffff1682101561269957604051636e553f6560e01b8152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af115801561266e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126929190613488565b94506126a1565b604088018190525b506001016123f8565b506040860151611732906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613219565b5f806126fa670de0b6b3a7640000896135ba565b60405163eddf1b7960e01b81526001600160a01b038b811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612763573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127879190613488565b90505f8160ff165f036127a257875160101c61ffff16612834565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612807573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061282b9190613797565b6020015161ffff165b90505f61286861285661284f670de0b6b3a7640000856135ba565b86906128fc565b6105a0670de0b6b3a7640000896135ba565b90505f61289c61288a83612884670de0b6b3a76400008f6135ba565b906128fc565b6105a0670de0b6b3a76400008c6135ba565b8a5190915060301c60ff166128b290600a6135af565b6128c490670de0b6b3a76400006135ba565b885160301c60ff166128d790600a6135af565b6128e190836135ba565b6128eb91906135d1565b9d9c50505050505050505050505050565b5f81156706f05b59d3b200001983900484111517612918575f5ffd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715612950575f5ffd5b50670de0b6b3a76400009190910260028204010490565b61298860405180606001604052805f81526020015f81526020015f81525090565b8160c001515f036129ac5760405163162908e360e11b815260040160405180910390fd5b6002826080015161ffff1610156129d65760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015612a5e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a82919061343a565b835160405163c44b11f760e01b81526001600160a01b0391821660048201529192505f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015612aef573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b13919061343a565b60c0850151855191925090612b33906001600160a01b0316333084612fe2565b845160405163b3596f0760e01b81526001600160a01b0391821660048201525f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa158015612b9b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bbf9190613488565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa158015612c48573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c6c9190613488565b90505f5b876080015161ffff16811015612f66578751606089015160405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263617ba03792612cd6928991905f90600401613682565b5f604051808303815f87803b158015612ced575f5ffd5b505af1158015612cff573d5f5f3e3d5ffd5b5050505083875f01818151612d1491906134b3565b915081815250505f612d378960600151868689878c8f6040015161ffff166126e6565b9050805f03612d4b576104ed8260016134b3565b606089015160405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a415bcad91612dc4917f00000000000000000000000000000000000000000000000000000000000000009186916002915f91906004016136af565b5f604051808303815f87803b158015612ddb575f5ffd5b505af1158015612ded573d5f5f3e3d5ffd5b505050508088602001818151612e0391906134b3565b9052506080890151612e17906001906135f0565b61ffff16821015612f5557885160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b391612e7191908590600401613641565b6020604051808303815f875af1158015612e8d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612eb19190613667565b506020890151604051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490525f604483015290911690630efe6a8b906064016020604051808303815f875af1158015612f2a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f4e9190613488565b9450612f5d565b604088018190525b50600101612c70565b5060a087015186511015612f9d57855160a088015160405163593100b560e11b815260048101929092526024820152604401610509565b6040860151612fd8906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903390613219565b5050505050919050565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af1613024573d5f5f3e3d5ffd5b5061302e856132a7565b61307a5760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610509565b5050505050565b60405163eddf1b7960e01b81526001600160a01b0385811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa1580156130e9573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061310d9190613488565b90505f8160ff165f0361312857845160101c61ffff166131ba565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa15801561318d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906131b19190613797565b6020015161ffff165b90505f6131f96131e76131d5670de0b6b3a7640000856135ba565b612884670de0b6b3a76400008b6135ba565b6105a0670de0b6b3a7640000886135ba565b905061320d670de0b6b3a7640000826135d1565b98975050505050505050565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af1613253573d5f5f3e3d5ffd5b5061325d846132a7565b6132a15760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b6044820152606401610509565b50505050565b5f6132c9565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d80156133085760208114613339576133037f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f6132ad565b613344565b823b613330576133307311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b60146132ad565b60019150613344565b3d5f5f3e5f51151591505b50919050565b5f60a08284031215613344575f5ffd5b5f60a0828403121561336a575f5ffd5b613374838361334a565b9392505050565b5f6020828403121561338b575f5ffd5b813567ffffffffffffffff8111156133a1575f5ffd5b82016101008185031215613374575f5ffd5b5f6101208284031280156133c5575f5ffd5b509092915050565b5f60808284031280156133c5575f5ffd5b61ffff811681146133ed575f5ffd5b50565b5f60208284031215613400575f5ffd5b8135613374816133de565b6001600160a01b03811681146133ed575f5ffd5b5f6020828403121561342f575f5ffd5b81356133748161340b565b5f602082840312801561344b575f5ffd5b506040516020810167ffffffffffffffff8111828210171561347b57634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b5f60208284031215613498575f5ffd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156134c6576134c661349f565b92915050565b6001815b6001841115613507578085048111156134eb576134eb61349f565b60018416156134f957908102905b60019390931c9280026134d0565b935093915050565b5f8261351d575060016134c6565b8161352957505f6134c6565b816001811461353f576002811461354957613565565b60019150506134c6565b60ff84111561355a5761355a61349f565b50506001821b6134c6565b5060208310610133831016604e8410600b8410161715613588575081810a6134c6565b6135945f1984846134cc565b805f19048211156135a7576135a761349f565b029392505050565b5f613374838361350f565b80820281158282048414176134c6576134c661349f565b5f826135eb57634e487b7160e01b5f52601260045260245ffd5b500490565b61ffff82811682821603908111156134c6576134c661349f565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b03929092168252602082015260400190565b80151581146133ed575f5ffd5b5f60208284031215613677575f5ffd5b81516133748161365a565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b5f5f8335601e198436030181126136f8575f5ffd5b83018035915067ffffffffffffffff821115613712575f5ffd5b602001915036819003821315613726575f5ffd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f6020828403121561378c575f5ffd5b81356133748161365a565b5f60608284031280156137a8575f5ffd5b506040516060810167ffffffffffffffff811182821017156137d857634e487b7160e01b5f52604160045260245ffd5b60405282516137e6816133de565b815260208301516137f6816133de565b60208201526040830151613809816133de565b6040820152939250505056fea164736f6c634300081c000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(params, overrides || {}) as Promise<Looping>;
  }
  override getDeployTransaction(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
