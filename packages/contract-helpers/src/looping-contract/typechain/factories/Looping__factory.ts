/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_aavePool',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_priceOracle',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_swapRouter',
        type: 'address',
        internalType: 'contract ISwapRouter',
      },
      {
        name: '_oracleDecimals',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '_pUSD',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nRWA',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nELIXIR',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nTBILL',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nRWATeller',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nELIXIRTeller',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_nTBILLTeller',
        type: 'address',
        internalType: 'address',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNELIXIR',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNELIXIRParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNRWA',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNRWAParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNTBILL',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNTBILLParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'error',
    name: 'InsufficientFundsToCompleteLoops',
    inputs: [
      {
        name: 'failedAtLoop',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidHealthFactor',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x6101e0604052348015610010575f5ffd5b5060405161334b38038061334b83398101604081905261002f916103b5565b60015f556001600160a01b03808c166080528a811660a05289811660c05260e0899052878116610100528681166101208190528682166101405285821661016052848216610180528382166101a0529082166101c0521561017a576101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af11580156100dc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101009190610484565b506101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af1158015610154573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101789190610484565b505b610140516001600160a01b03161561027c576101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af11580156101de573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102029190610484565b506101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af1158015610256573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061027a9190610484565b505b610160516001600160a01b03161561037e576101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af11580156102e0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103049190610484565b506101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af1158015610358573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061037c9190610484565b505b50505050505050505050506104aa565b6001600160a01b03811681146103a2575f5ffd5b50565b80516103b08161038e565b919050565b5f5f5f5f5f5f5f5f5f5f5f6101608c8e0312156103d0575f5ffd5b8b516103db8161038e565b60208d0151909b506103ec8161038e565b60408d0151909a506103fd8161038e565b60608d015160808e0151919a5098506104158161038e565b60a08d01519097506104268161038e565b60c08d01519096506104378161038e565b945061044560e08d016103a5565b93506104546101008d016103a5565b92506104636101208d016103a5565b91506104726101408d016103a5565b90509295989b509295989b9093969950565b5f60208284031215610494575f5ffd5b815180151581146104a3575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c051612d136106385f395f61018401525f6108a301525f6102a301525f61015f01525f61087e01525f61027e01525f8181611c0601528181611ea301528181611fa401528181612044015281816120d7015281816121b0015261223001525f50505f8181610fb901528181611057015281816110df015281816118c20152818161196001526119e801525f8181610d4f01528181610dea015281816116db0152818161177601528181611e210152611ecd01525f818161038b0152818161046b01528181610506015281816105ae015281816106b5015281816109d801528181610a7d01528181610b4f01528181610bea01528181610c9201528181610ecb0152818161136301528181611408015281816114db015281816115760152818161161e015281816117d401528181611c3001528181611cc101528181611d7e01528181611f770152818161236e0152818161240a015281816125b701526126530152612d135ff3fe608060405234801561000f575f5ffd5b5060043610610060575f3560e01c806367a3bea31461006457806376681f2a1461009d5780637b809dee146100b0578063d19cfecd146100c3578063d5b6e490146100d6578063da529841146100e9575b5f5ffd5b61007761007236600461285c565b6100fc565b604080518251815260208084015190820152918101519082015260600160405180910390f35b6100776100ab36600461285c565b610224565b6100776100be36600461285c565b6102df565b6100776100d136600461285c565b610824565b6100776100e436600461287d565b6108df565b6100776100f73660046128b5565b611269565b61011d60405180606001604052805f81526020015f81526020015f81525090565b60025f54036101475760405162461bcd60e51b815260040161013e906128cf565b60405180910390fd5b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208083019190915261021a928201906101c090860186612918565b61ffff1681526020018460200160208101906101dc9190612947565b6001600160a01b031681526020016101fa6060860160408701612918565b61ffff168152602001846060013581526020018460800135815250611b80565b60015f5592915050565b61024560405180606001604052805f81526020015f81526020015f81525090565b60025f54036102665760405162461bcd60e51b815260040161013e906128cf565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208083019190915261021a928201906101c090860186612918565b61030060405180606001604052805f81526020015f81526020015f81525090565b60025f54036103215760405162461bcd60e51b815260040161013e906128cf565b60025f9081556080830135900361034b5760405163162908e360e11b815260040160405180910390fd5b600261035d6080840160608501612918565b61ffff1610156103805760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76103bd6020860186612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156103ff573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104239190612962565b9050608083013561044e33308361043d6020890189612947565b6001600160a01b0316929190612279565b61045b6020850185612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016104a89291906129b0565b6020604051808303815f875af11580156104c4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e891906129d6565b506104f66020850185612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016105449291906129b0565b6020604051808303815f875af1158015610560573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061058491906129d6565b505f80805b6105996080880160608901612918565b61ffff16811015610764576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0376105e060208a018a612947565b866105f160608c0160408d01612947565b5f6040518563ffffffff1660e01b815260040161061194939291906129f1565b5f604051808303815f87803b158015610628575f5ffd5b505af115801561063a573d5f5f3e3d5ffd5b50505050838361064a9190612a32565b92505f61067b61066060608a0160408b01612947565b868861067260408d0160208e01612918565b61ffff16612318565b9050805f036106ab5761068f826001612a32565b60405163235ffc1f60e01b815260040161013e91815260200190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad6106e760208b018b612947565b8360025f8d60400160208101906106fe9190612947565b6040518663ffffffff1660e01b815260040161071e959493929190612a4b565b5f604051808303815f87803b158015610735575f5ffd5b505af1158015610747573d5f5f3e3d5ffd5b5050505080836107579190612a32565b9094509150600101610589565b505f6107736020880188612947565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156107b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107db9190612a7f565b90506107ff33826107ef60208b018b612947565b6001600160a01b031691906124d2565b6040805160608101825293845260208401929092529082015260015f55949350505050565b61084560405180606001604052805f81526020015f81526020015f81525090565b60025f54036108665760405162461bcd60e51b815260040161013e906128cf565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208083019190915261021a928201906101c090860186612918565b61090060405180606001604052805f81526020015f81526020015f81525090565b60025f54036109215760405162461bcd60e51b815260040161013e906128cf565b60025f90815560a0830135900361094b5760405163162908e360e11b815260040160405180910390fd5b600261095d6080840160608501612918565b61ffff1610156109805760405163204ec41160e21b815260040160405180910390fd5b6109906060830160408401612947565b6001600160a01b03166109a66020840184612947565b6001600160a01b0316036109cd576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610a0a6020860186612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610a4c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a709190612962565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610ab26060870160408801612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610af4573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b189190612962565b905060a0840135610b3233308361043d60208a018a612947565b610b3f6020860186612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610b8c9291906129b0565b6020604051808303815f875af1158015610ba8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bcc91906129d6565b50610bda6020860186612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401610c289291906129b0565b6020604051808303815f875af1158015610c44573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c6891906129d6565b505f80805b610c7d6080890160608a01612918565b61ffff16811015611180576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610cc460208b018b612947565b86610cd560a08d0160808e01612947565b5f6040518563ffffffff1660e01b8152600401610cf594939291906129f1565b5f604051808303815f87803b158015610d0c575f5ffd5b505af1158015610d1e573d5f5f3e3d5ffd5b505050508383610d2e9190612a32565b92505f610ead610d4460a08b0160808c01612947565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07610d8160208f018f612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610dc3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de79190612a7f565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6040016020810190610e2a9190612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e6c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e909190612a7f565b8b8f6020016020810190610ea49190612918565b61ffff16612560565b9050805f03610ec15761068f826001612a32565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad610f0060608c0160408d01612947565b8360025f8e6080016020810190610f179190612947565b6040518663ffffffff1660e01b8152600401610f37959493929190612a4b565b5f604051808303815f87803b158015610f4e575f5ffd5b505af1158015610f60573d5f5f3e3d5ffd5b505050508083610f709190612a32565b92506001610f8460808b0160608c01612918565b610f8e9190612a96565b61ffff1682101561117757610fa960608a0160408b01612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610ff69291906129b0565b6020604051808303815f875af1158015611012573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061103691906129d6565b5061104760608a0160408b01612947565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016110949291906129b0565b6020604051808303815f875af11580156110b0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110d491906129d6565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061111260e08d018d612ab0565b855f6040518663ffffffff1660e01b8152600401611134959493929190612afa565b6020604051808303815f875af1158015611150573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111749190612a7f565b94505b50600101610c6d565b508660c001358210156111b35760405163593100b560e11b81526004810183905260c0880135602482015260440161013e565b5f6111c46060890160408a01612947565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611208573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061122c9190612a7f565b905061124333826107ef60608c0160408d01612947565b6040805160608101825293845260208401929092529082015260015f5595945050505050565b61128a60405180606001604052805f81526020015f81526020015f81525090565b60025f54036112ab5760405162461bcd60e51b815260040161013e906128cf565b60025f90815561010083013590036112d65760405163162908e360e11b815260040160405180910390fd5b60026112e860c0840160a08501612918565b61ffff16101561130b5760405163204ec41160e21b815260040160405180910390fd5b61131b60a0830160808401612947565b6001600160a01b03166113316020840184612947565b6001600160a01b031603611358576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76113956020860186612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156113d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113fb9190612962565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761143d60a0870160808801612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561147f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114a39190612962565b90506101008401356114be33308361043d60208a018a612947565b6114cb6020860186612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016115189291906129b0565b6020604051808303815f875af1158015611534573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061155891906129d6565b506115666020860186612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016115b49291906129b0565b6020604051808303815f875af11580156115d0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115f491906129d6565b505f80805b61160960c0890160a08a01612918565b61ffff16811015611abd576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761165060208b018b612947565b8661166160608d0160408e01612947565b5f6040518563ffffffff1660e01b815260040161168194939291906129f1565b5f604051808303815f87803b158015611698575f5ffd5b505af11580156116aa573d5f5f3e3d5ffd5b5050505083836116ba9190612a32565b92505f6117b66116d060608b0160408c01612947565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f0761170d60208f018f612947565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561174f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117739190612a7f565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6080016020810190610e2a9190612947565b9050805f036117ca5761068f826001612a32565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61180960a08c0160808d01612947565b8360025f8e60400160208101906118209190612947565b6040518663ffffffff1660e01b8152600401611840959493929190612a4b565b5f604051808303815f87803b158015611857575f5ffd5b505af1158015611869573d5f5f3e3d5ffd5b5050505080836118799190612a32565b9250600161188d60c08b0160a08c01612918565b6118979190612a96565b61ffff16821015611ab4576118b260a08a0160808b01612947565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016118ff9291906129b0565b6020604051808303815f875af115801561191b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061193f91906129d6565b5061195060a08a0160808b01612947565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161199d9291906129b0565b6020604051808303815f875af11580156119b9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119dd91906129d6565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca30611a1e60e08d0160c08e01612947565b611a2e60808e0160608f01612b49565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af1158015611a8d573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ab19190612a7f565b94505b506001016115f9565b508660e00135821015611af05760405163593100b560e11b81526004810183905260e0880135602482015260440161013e565b5f611b0160a0890160808a01612947565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611b45573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b699190612a7f565b905061124333826107ef60a08c0160808d01612947565b611ba160405180606001604052805f81526020015f81526020015f81525090565b8160c001515f03611bc55760405163162908e360e11b815260040160405180910390fd5b6002826080015161ffff161015611bef5760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015611c77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c9b9190612962565b835160405163c44b11f760e01b81526001600160a01b0391821660048201529192505f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015611d08573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d2c9190612962565b60c0850151855191925090611d4c906001600160a01b0316333084612279565b5f80805b876080015161ffff16811015612163578751606089015160405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263617ba03792611db6928991905f906004016129f1565b5f604051808303815f87803b158015611dcd575f5ffd5b505af1158015611ddf573d5f5f3e3d5ffd5b505050508383611def9190612a32565b6060890151895160405163b3596f0760e01b81526001600160a01b0391821660048201529295505f92611f47929188917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611e68573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e8c9190612a7f565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528b917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611f14573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f389190612a7f565b8c8f6040015161ffff16612560565b9050805f03611f5b5761068f826001612a32565b606089015160405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a415bcad91611fd4917f00000000000000000000000000000000000000000000000000000000000000009186916002915f9190600401612a4b565b5f604051808303815f87803b158015611feb575f5ffd5b505af1158015611ffd573d5f5f3e3d5ffd5b50505050808361200d9190612a32565b9250600189608001516120209190612a96565b61ffff1682101561215a57885160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b39161207a919085906004016129b0565b6020604051808303815f875af1158015612096573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120ba91906129d6565b506020890151604051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490525f604483015290911690630efe6a8b906064016020604051808303815f875af1158015612133573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121579190612a7f565b94505b50600101611d50565b508660a001518210156121995760a087015160405163593100b560e11b815261013e918491600401918252602082015260400190565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156121fd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122219190612a7f565b90506122576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836124d2565b6040805160608101825293845260208401929092529082015295945050505050565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af16122bb573d5f5f3e3d5ffd5b506122c58561273e565b6123115760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161013e565b5050505050565b81515f9060301c60ff168161232e82600a612c47565b61234090670de0b6b3a7640000612c52565b61234a9087612c71565b60405163eddf1b7960e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa1580156123b3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123d79190612a7f565b90505f8160ff165f036123f257865160101c61ffff16612484565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612457573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061247b9190612c88565b6020015161ffff165b90505f61249a61249485846127e1565b88612817565b9050670de0b6b3a76400006124b086600a612c47565b6124ba9083612c71565b6124c49190612c52565b9a9950505050505050505050565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af161250c573d5f5f3e3d5ffd5b506125168461273e565b61255a5760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b604482015260640161013e565b50505050565b83515f90819060301c60ff1661257790600a612c47565b61258990670de0b6b3a7640000612c52565b6125939089612c71565b60405163eddf1b7960e01b81526001600160a01b038b811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa1580156125fc573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126209190612a7f565b90505f8160ff165f0361263b57875160101c61ffff166126cd565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa1580156126a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126c49190612c88565b6020015161ffff165b90505f6126e36126dd85846127e1565b87612817565b90505f6126f96126f38c846127e1565b8a612817565b8851909150670de0b6b3a76400009060301c60ff1661271990600a612c47565b6127239083612c71565b61272d9190612c52565b9d9c50505050505050505050505050565b5f612760565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d801561279f57602081146127d05761279a7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612744565b6127db565b823b6127c7576127c77311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612744565b600191506127db565b3d5f5f3e5f51151591505b50919050565b5f81156706f05b59d3b2000019839004841115176127fd575f5ffd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715612835575f5ffd5b50670de0b6b3a76400009190910260028204010490565b5f60a082840312156127db575f5ffd5b5f60a0828403121561286c575f5ffd5b612876838361284c565b9392505050565b5f6020828403121561288d575f5ffd5b813567ffffffffffffffff8111156128a3575f5ffd5b82016101008185031215612876575f5ffd5b5f6101208284031280156128c7575f5ffd5b509092915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff81168114612915575f5ffd5b50565b5f60208284031215612928575f5ffd5b813561287681612906565b6001600160a01b0381168114612915575f5ffd5b5f60208284031215612957575f5ffd5b813561287681612933565b5f6020828403128015612973575f5ffd5b506040516020810167ffffffffffffffff811182821017156129a357634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b6001600160a01b03929092168252602082015260400190565b8015158114612915575f5ffd5b5f602082840312156129e6575f5ffd5b8151612876816129c9565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b80820180821115612a4557612a45612a1e565b92915050565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b5f60208284031215612a8f575f5ffd5b5051919050565b61ffff8281168282160390811115612a4557612a45612a1e565b5f5f8335601e19843603018112612ac5575f5ffd5b83018035915067ffffffffffffffff821115612adf575f5ffd5b602001915036819003821315612af3575f5ffd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f60208284031215612b59575f5ffd5b8135612876816129c9565b6001815b6001841115612b9f57808504811115612b8357612b83612a1e565b6001841615612b9157908102905b60019390931c928002612b68565b935093915050565b5f82612bb557506001612a45565b81612bc157505f612a45565b8160018114612bd75760028114612be157612bfd565b6001915050612a45565b60ff841115612bf257612bf2612a1e565b50506001821b612a45565b5060208310610133831016604e8410600b8410161715612c20575081810a612a45565b612c2c5f198484612b64565b805f1904821115612c3f57612c3f612a1e565b029392505050565b5f6128768383612ba7565b5f82612c6c57634e487b7160e01b5f52601260045260245ffd5b500490565b8082028115828204841417612a4557612a45612a1e565b5f6060828403128015612c99575f5ffd5b506040516060810167ffffffffffffffff81118282101715612cc957634e487b7160e01b5f52604160045260245ffd5b6040528251612cd781612906565b81526020830151612ce781612906565b60208201526040830151612cfa81612906565b6040820152939250505056fea164736f6c634300081c000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _aavePool: string,
    _priceOracle: string,
    _swapRouter: string,
    _oracleDecimals: BigNumberish,
    _pUSD: string,
    _nRWA: string,
    _nELIXIR: string,
    _nTBILL: string,
    _nRWATeller: string,
    _nELIXIRTeller: string,
    _nTBILLTeller: string,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(
      _aavePool,
      _priceOracle,
      _swapRouter,
      _oracleDecimals,
      _pUSD,
      _nRWA,
      _nELIXIR,
      _nTBILL,
      _nRWATeller,
      _nELIXIRTeller,
      _nTBILLTeller,
      overrides || {},
    ) as Promise<Looping>;
  }
  override getDeployTransaction(
    _aavePool: string,
    _priceOracle: string,
    _swapRouter: string,
    _oracleDecimals: BigNumberish,
    _pUSD: string,
    _nRWA: string,
    _nELIXIR: string,
    _nTBILL: string,
    _nRWATeller: string,
    _nELIXIRTeller: string,
    _nTBILLTeller: string,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aavePool,
      _priceOracle,
      _swapRouter,
      _oracleDecimals,
      _pUSD,
      _nRWA,
      _nELIXIR,
      _nTBILL,
      _nRWATeller,
      _nELIXIRTeller,
      _nTBILLTeller,
      overrides || {},
    );
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
