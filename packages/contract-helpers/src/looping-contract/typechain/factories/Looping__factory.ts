/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface, LoopDataTypes } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopConstructorParams',
        components: [
          {
            name: 'aavePool',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'priceOracle',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'swapRouter',
            type: 'address',
            internalType: 'contract ISwapRouter',
          },
          {
            name: 'oracleDecimals',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'pUSD',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nRWA',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nELIXIR',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nTBILL',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nRWATeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nELIXIRTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nTBILLTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'sPLUME',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'WPLUME',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNELIXIR',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNELIXIRParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNRWA',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNRWAParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNTBILL',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNTBILLParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSPLUME',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSPLUMEParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'error',
    name: 'InsufficientFundsToCompleteLoops',
    inputs: [
      {
        name: 'failedAtLoop',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x610220604052348015610010575f5ffd5b50604051613e0b380380613e0b83398101604081905261002f91610639565b60015f5580516001600160a01b0390811660809081526020830151821660a09081526040840151831660c0908152606085015160e09081529285015184166101009081529185015184166101208181529186015185166101409081529386015185166101609081529286015185166101809081529186015185166101a0529285015184166101c0529084015183166101e05283015190911661020052156101c0576101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610122573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101469190610735565b506101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561019a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101be9190610735565b505b610140516001600160a01b0316156102c2576101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610224573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102489190610735565b506101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561029c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102c09190610735565b505b610160516001600160a01b0316156103c4576101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610326573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061034a9190610735565b506101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561039e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c29190610735565b505b6101e0516001600160a01b0316156104c6576101e05160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610428573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044c9190610735565b506101e05160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156104a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c49190610735565b505b610200516001600160a01b0316158015906104ec57506101e0516001600160a01b031615155b156105e357610200516101e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610544573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105689190610735565b50610200516101e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156105bd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e19190610735565b505b5061075b565b6040516101a081016001600160401b038111828210171561061857634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b0381168114610634575f5ffd5b919050565b5f6101a082840312801561064b575f5ffd5b506106546105e9565b61065d8361061e565b815261066b6020840161061e565b602082015261067c6040840161061e565b6040820152606083810151908201526106976080840161061e565b60808201526106a860a0840161061e565b60a08201526106b960c0840161061e565b60c08201526106ca60e0840161061e565b60e08201526106dc610100840161061e565b6101008201526106ef610120840161061e565b610120820152610702610140840161061e565b610140820152610715610160840161061e565b610160820152610728610180840161061e565b6101808201529392505050565b5f60208284031215610745575f5ffd5b81518015158114610754575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516134ac61095f5f395f8181611d6701528181611feb015281816120d80152818161224201526122c201525f8181611cbb01528181611e1101528181611e8901528181611f3f01526121ac01525f6101b101525f6108cc01525f61081101525f61018c01525f6108a701525f6107ec01525f818161236f0152818161260c0152818161270d015281816127ad015281816128450152818161291f015261299f01525f50505f818161103c015281816110da0152818161116201528181611945015281816119e30152611a6b01525f8181610dd201528181610e6d0152818161175e015281816117f901528181611f69015281816120150152818161258a015261263601525f81816102f9015281816103d9015281816104740152818161051c0152818161062301528181610a5b01528181610b0001528181610bd201528181610c6d01528181610d1501528181610f4e015281816113e60152818161148b0152818161155e015281816115f9015281816116a10152818161185701528181611ce501528181611d9401528181611e62015281816120a9015281816123990152818161242a015281816124e7015281816126e001528181612add01528181612b7901528181612d260152612dc201526134ac5ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c8063d19cfecd11610058578063d19cfecd146100dd578063d5b6e490146100f0578063da52984114610103578063de1b7a8d14610116575f5ffd5b80634ffd66e51461007e5780637b809dee146100b75780638410cbad146100ca575b5f5ffd5b61009161008c366004612fcb565b610129565b604080518251815260208084015190820152918101519082015260600160405180910390f35b6100916100c5366004612ffc565b61024d565b6100916100d8366004612fcb565b610792565b6100916100eb366004612ffc565b61084d565b6100916100fe366004613016565b610962565b61009161011136600461304e565b6112ec565b610091610124366004612fcb565b611c03565b61014a60405180606001604052805f81526020015f81526020015f81525090565b60025f54036101745760405162461bcd60e51b815260040161016b90613068565b60405180910390fd5b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610243928201906101ed908601866130b1565b61ffff16815260200184602001602081019061020991906130e0565b6001600160a01b0316815260200161022760608601604087016130b1565b61ffff1681526020015f815260200184606001358152506122e9565b60015f5592915050565b61026e60405180606001604052805f81526020015f81526020015f81525090565b60025f540361028f5760405162461bcd60e51b815260040161016b90613068565b60025f908155608083013590036102b95760405163162908e360e11b815260040160405180910390fd5b60026102cb60808401606085016130b1565b61ffff1610156102ee5760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761032b60208601866130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561036d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061039191906130fb565b905060808301356103bc3330836103ab60208901896130e0565b6001600160a01b03169291906129e8565b6103c960208501856130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610416929190613149565b6020604051808303815f875af1158015610432573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610456919061316f565b5061046460208501856130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016104b2929190613149565b6020604051808303815f875af11580156104ce573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104f2919061316f565b505f80805b61050760808801606089016130b1565b61ffff168110156106d2576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761054e60208a018a6130e0565b8661055f60608c0160408d016130e0565b5f6040518563ffffffff1660e01b815260040161057f949392919061318a565b5f604051808303815f87803b158015610596575f5ffd5b505af11580156105a8573d5f5f3e3d5ffd5b5050505083836105b891906131cb565b92505f6105e96105ce60608a0160408b016130e0565b86886105e060408d0160208e016130b1565b61ffff16612a87565b9050805f03610619576105fd8260016131cb565b60405163235ffc1f60e01b815260040161016b91815260200190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61065560208b018b6130e0565b8360025f8d604001602081019061066c91906130e0565b6040518663ffffffff1660e01b815260040161068c9594939291906131e4565b5f604051808303815f87803b1580156106a3575f5ffd5b505af11580156106b5573d5f5f3e3d5ffd5b5050505080836106c591906131cb565b90945091506001016104f7565b505f6106e160208801886130e0565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610725573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107499190613218565b905061076d338261075d60208b018b6130e0565b6001600160a01b03169190612c41565b6040805160608101825293845260208401929092529082015260015f55949350505050565b6107b360405180606001604052805f81526020015f81526020015f81525090565b60025f54036107d45760405162461bcd60e51b815260040161016b90613068565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610243928201906101ed908601866130b1565b61086e60405180606001604052805f81526020015f81526020015f81525090565b60025f540361088f5760405162461bcd60e51b815260040161016b90613068565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f00000000000000000000000000000000000000000000000000000000000000001660208083019190915261024392820190610908908601866130b1565b61ffff16815260200184602001602081019061092491906130e0565b6001600160a01b0316815260200161094260608601604087016130b1565b61ffff1681526020018460600135815260200184608001358152506122e9565b61098360405180606001604052805f81526020015f81526020015f81525090565b60025f54036109a45760405162461bcd60e51b815260040161016b90613068565b60025f90815560a083013590036109ce5760405163162908e360e11b815260040160405180910390fd5b60026109e060808401606085016130b1565b61ffff161015610a035760405163204ec41160e21b815260040160405180910390fd5b610a1360608301604084016130e0565b6001600160a01b0316610a2960208401846130e0565b6001600160a01b031603610a50576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610a8d60208601866130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610acf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610af391906130fb565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610b3560608701604088016130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610b77573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b9b91906130fb565b905060a0840135610bb53330836103ab60208a018a6130e0565b610bc260208601866130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610c0f929190613149565b6020604051808303815f875af1158015610c2b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c4f919061316f565b50610c5d60208601866130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401610cab929190613149565b6020604051808303815f875af1158015610cc7573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ceb919061316f565b505f80805b610d006080890160608a016130b1565b61ffff16811015611203576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610d4760208b018b6130e0565b86610d5860a08d0160808e016130e0565b5f6040518563ffffffff1660e01b8152600401610d78949392919061318a565b5f604051808303815f87803b158015610d8f575f5ffd5b505af1158015610da1573d5f5f3e3d5ffd5b505050508383610db191906131cb565b92505f610f30610dc760a08b0160808c016130e0565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07610e0460208f018f6130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e46573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e6a9190613218565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6040016020810190610ead91906130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610eef573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f139190613218565b8b8f6020016020810190610f2791906130b1565b61ffff16612ccf565b9050805f03610f44576105fd8260016131cb565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad610f8360608c0160408d016130e0565b8360025f8e6080016020810190610f9a91906130e0565b6040518663ffffffff1660e01b8152600401610fba9594939291906131e4565b5f604051808303815f87803b158015610fd1575f5ffd5b505af1158015610fe3573d5f5f3e3d5ffd5b505050508083610ff391906131cb565b9250600161100760808b0160608c016130b1565b611011919061322f565b61ffff168210156111fa5761102c60608a0160408b016130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401611079929190613149565b6020604051808303815f875af1158015611095573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110b9919061316f565b506110ca60608a0160408b016130e0565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611117929190613149565b6020604051808303815f875af1158015611133573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611157919061316f565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061119560e08d018d613249565b855f6040518663ffffffff1660e01b81526004016111b7959493929190613293565b6020604051808303815f875af11580156111d3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111f79190613218565b94505b50600101610cf0565b508660c001358210156112365760405163593100b560e11b81526004810183905260c0880135602482015260440161016b565b5f6112476060890160408a016130e0565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561128b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112af9190613218565b90506112c6338261075d60608c0160408d016130e0565b6040805160608101825293845260208401929092529082015260015f5595945050505050565b61130d60405180606001604052805f81526020015f81526020015f81525090565b60025f540361132e5760405162461bcd60e51b815260040161016b90613068565b60025f90815561010083013590036113595760405163162908e360e11b815260040160405180910390fd5b600261136b60c0840160a085016130b1565b61ffff16101561138e5760405163204ec41160e21b815260040160405180910390fd5b61139e60a08301608084016130e0565b6001600160a01b03166113b460208401846130e0565b6001600160a01b0316036113db576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761141860208601866130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561145a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061147e91906130fb565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76114c060a08701608088016130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611502573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061152691906130fb565b90506101008401356115413330836103ab60208a018a6130e0565b61154e60208601866130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b815260040161159b929190613149565b6020604051808303815f875af11580156115b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115db919061316f565b506115e960208601866130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401611637929190613149565b6020604051808303815f875af1158015611653573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611677919061316f565b505f80805b61168c60c0890160a08a016130b1565b61ffff16811015611b40576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0376116d360208b018b6130e0565b866116e460608d0160408e016130e0565b5f6040518563ffffffff1660e01b8152600401611704949392919061318a565b5f604051808303815f87803b15801561171b575f5ffd5b505af115801561172d573d5f5f3e3d5ffd5b50505050838361173d91906131cb565b92505f61183961175360608b0160408c016130e0565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f0761179060208f018f6130e0565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156117d2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117f69190613218565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6080016020810190610ead91906130e0565b9050805f0361184d576105fd8260016131cb565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61188c60a08c0160808d016130e0565b8360025f8e60400160208101906118a391906130e0565b6040518663ffffffff1660e01b81526004016118c39594939291906131e4565b5f604051808303815f87803b1580156118da575f5ffd5b505af11580156118ec573d5f5f3e3d5ffd5b5050505080836118fc91906131cb565b9250600161191060c08b0160a08c016130b1565b61191a919061322f565b61ffff16821015611b375761193560a08a0160808b016130e0565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401611982929190613149565b6020604051808303815f875af115801561199e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119c2919061316f565b506119d360a08a0160808b016130e0565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611a20929190613149565b6020604051808303815f875af1158015611a3c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a60919061316f565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca30611aa160e08d0160c08e016130e0565b611ab160808e0160608f016132e2565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af1158015611b10573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b349190613218565b94505b5060010161167c565b508660e00135821015611b735760405163593100b560e11b81526004810183905260e0880135602482015260440161016b565b5f611b8460a0890160808a016130e0565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611bc8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bec9190613218565b90506112c6338261075d60a08c0160808d016130e0565b611c2460405180606001604052805f81526020015f81526020015f81525090565b60025f5403611c455760405162461bcd60e51b815260040161016b90613068565b60025f90815560608301359003611c6f5760405163162908e360e11b815260040160405180910390fd5b6002611c8160608401604085016130b1565b61ffff161015611ca45760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015611d2c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d5091906130fb565b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015611dd9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dfd91906130fb565b90506060840135611e396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330846129e8565b5f80805b611e4d6060890160408a016130b1565b61ffff1681101561222a576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0377f000000000000000000000000000000000000000000000000000000000000000086611eb960408d0160208e016130e0565b5f6040518563ffffffff1660e01b8152600401611ed9949392919061318a565b5f604051808303815f87803b158015611ef0575f5ffd5b505af1158015611f02573d5f5f3e3d5ffd5b505050508383611f1291906131cb565b92505f612093611f2860408b0160208c016130e0565b60405163b3596f0760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015288917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611fb0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fd49190613218565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528c917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa15801561205c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120809190613218565b8b8f5f016020810190610f2791906130b1565b9050805f036120a7576105fd8260016131cb565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a415bcad7f00000000000000000000000000000000000000000000000000000000000000008360025f8e602001602081019061210e91906130e0565b6040518663ffffffff1660e01b815260040161212e9594939291906131e4565b5f604051808303815f87803b158015612145575f5ffd5b505af1158015612157573d5f5f3e3d5ffd5b50505050808361216791906131cb565b9250600161217b60608b0160408c016130b1565b612185919061322f565b61ffff1682101561222157604051636e553f6560e01b8152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af11580156121fa573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061221e9190613218565b94505b50600101611e3d565b506040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561228f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122b39190613218565b90506112c66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612c41565b61230a60405180606001604052805f81526020015f81526020015f81525090565b8160c001515f0361232e5760405163162908e360e11b815260040160405180910390fd5b6002826080015161ffff1610156123585760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa1580156123e0573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061240491906130fb565b835160405163c44b11f760e01b81526001600160a01b0391821660048201529192505f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015612471573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061249591906130fb565b60c08501518551919250906124b5906001600160a01b03163330846129e8565b5f80805b876080015161ffff168110156128d2578751606089015160405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263617ba0379261251f928991905f9060040161318a565b5f604051808303815f87803b158015612536575f5ffd5b505af1158015612548573d5f5f3e3d5ffd5b50505050838361255891906131cb565b6060890151895160405163b3596f0760e01b81526001600160a01b0391821660048201529295505f926126b0929188917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa1580156125d1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125f59190613218565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528b917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa15801561267d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126a19190613218565b8c8f6040015161ffff16612ccf565b9050805f036126c4576105fd8260016131cb565b606089015160405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a415bcad9161273d917f00000000000000000000000000000000000000000000000000000000000000009186916002915f91906004016131e4565b5f604051808303815f87803b158015612754575f5ffd5b505af1158015612766573d5f5f3e3d5ffd5b50505050808361277691906131cb565b925060018960800151612789919061322f565b61ffff168210156128c957885160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b3916127e391908590600401613149565b6020604051808303815f875af11580156127ff573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612823919061316f565b50602089015160a08a0151604051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590526044820192909252911690630efe6a8b906064016020604051808303815f875af11580156128a2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128c69190613218565b94505b506001016124b9565b508660a001518210156129085760a087015160405163593100b560e11b815261016b918491600401918252602082015260400190565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561296c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129909190613218565b90506129c66001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612c41565b6040805160608101825293845260208401929092529082015295945050505050565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af1612a2a573d5f5f3e3d5ffd5b50612a3485612ead565b612a805760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161016b565b5050505050565b81515f9060301c60ff1681612a9d82600a6133e0565b612aaf90670de0b6b3a76400006133eb565b612ab9908761340a565b60405163eddf1b7960e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612b22573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b469190613218565b90505f8160ff165f03612b6157865160101c61ffff16612bf3565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612bc6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bea9190613421565b6020015161ffff165b90505f612c09612c038584612f50565b88612f86565b9050670de0b6b3a7640000612c1f86600a6133e0565b612c29908361340a565b612c3391906133eb565b9a9950505050505050505050565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af1612c7b573d5f5f3e3d5ffd5b50612c8584612ead565b612cc95760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b604482015260640161016b565b50505050565b83515f90819060301c60ff16612ce690600a6133e0565b612cf890670de0b6b3a76400006133eb565b612d02908961340a565b60405163eddf1b7960e01b81526001600160a01b038b811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612d6b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d8f9190613218565b90505f8160ff165f03612daa57875160101c61ffff16612e3c565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612e0f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e339190613421565b6020015161ffff165b90505f612e52612e4c8584612f50565b87612f86565b90505f612e68612e628c84612f50565b8a612f86565b8851909150670de0b6b3a76400009060301c60ff16612e8890600a6133e0565b612e92908361340a565b612e9c91906133eb565b9d9c50505050505050505050505050565b5f612ecf565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d8015612f0e5760208114612f3f57612f097f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612eb3565b612f4a565b823b612f3657612f367311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612eb3565b60019150612f4a565b3d5f5f3e5f51151591505b50919050565b5f81156706f05b59d3b200001983900484111517612f6c575f5ffd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715612fa4575f5ffd5b50670de0b6b3a76400009190910260028204010490565b5f60808284031215612f4a575f5ffd5b5f60808284031215612fdb575f5ffd5b612fe58383612fbb565b9392505050565b5f60a08284031215612f4a575f5ffd5b5f60a0828403121561300c575f5ffd5b612fe58383612fec565b5f60208284031215613026575f5ffd5b813567ffffffffffffffff81111561303c575f5ffd5b82016101008185031215612fe5575f5ffd5b5f610120828403128015613060575f5ffd5b509092915050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff811681146130ae575f5ffd5b50565b5f602082840312156130c1575f5ffd5b8135612fe58161309f565b6001600160a01b03811681146130ae575f5ffd5b5f602082840312156130f0575f5ffd5b8135612fe5816130cc565b5f602082840312801561310c575f5ffd5b506040516020810167ffffffffffffffff8111828210171561313c57634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b6001600160a01b03929092168252602082015260400190565b80151581146130ae575f5ffd5b5f6020828403121561317f575f5ffd5b8151612fe581613162565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b808201808211156131de576131de6131b7565b92915050565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b5f60208284031215613228575f5ffd5b5051919050565b61ffff82811682821603908111156131de576131de6131b7565b5f5f8335601e1984360301811261325e575f5ffd5b83018035915067ffffffffffffffff821115613278575f5ffd5b60200191503681900382131561328c575f5ffd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f602082840312156132f2575f5ffd5b8135612fe581613162565b6001815b60018411156133385780850481111561331c5761331c6131b7565b600184161561332a57908102905b60019390931c928002613301565b935093915050565b5f8261334e575060016131de565b8161335a57505f6131de565b8160018114613370576002811461337a57613396565b60019150506131de565b60ff84111561338b5761338b6131b7565b50506001821b6131de565b5060208310610133831016604e8410600b84101617156133b9575081810a6131de565b6133c55f1984846132fd565b805f19048211156133d8576133d86131b7565b029392505050565b5f612fe58383613340565b5f8261340557634e487b7160e01b5f52601260045260245ffd5b500490565b80820281158282048414176131de576131de6131b7565b5f6060828403128015613432575f5ffd5b506040516060810167ffffffffffffffff8111828210171561346257634e487b7160e01b5f52604160045260245ffd5b60405282516134708161309f565b815260208301516134808161309f565b602082015260408301516134938161309f565b6040820152939250505056fea164736f6c634300081c000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(params, overrides || {}) as Promise<Looping>;
  }
  override getDeployTransaction(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
