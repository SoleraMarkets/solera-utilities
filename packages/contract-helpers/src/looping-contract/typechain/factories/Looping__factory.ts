/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface, LoopDataTypes } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopConstructorParams',
        components: [
          {
            name: 'aavePool',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'priceOracle',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'swapRouter',
            type: 'address',
            internalType: 'contract ISwapRouter',
          },
          {
            name: 'oracleDecimals',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'pUSD',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nRWA',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nELIXIR',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nTBILL',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nRWATeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nELIXIRTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nTBILLTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'sPLUME',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'WPLUME',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNELIXIR',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNELIXIRParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNRWA',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNRWAParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNTBILL',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNTBILLParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSPLUME',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSPLUMEParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'error',
    name: 'InsufficientFundsToCompleteLoops',
    inputs: [
      {
        name: 'failedAtLoop',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x610220604052348015610010575f5ffd5b50604051613d96380380613d9683398101604081905261002f91610639565b60015f5580516001600160a01b0390811660809081526020830151821660a09081526040840151831660c0908152606085015160e09081529285015184166101009081529185015184166101208181529186015185166101409081529386015185166101609081529286015185166101809081529186015185166101a0529285015184166101c0529084015183166101e05283015190911661020052156101c0576101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610122573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101469190610735565b506101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561019a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101be9190610735565b505b610140516001600160a01b0316156102c2576101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610224573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102489190610735565b506101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561029c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102c09190610735565b505b610160516001600160a01b0316156103c4576101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610326573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061034a9190610735565b506101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af115801561039e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c29190610735565b505b6101e0516001600160a01b0316156104c6576101e05160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610428573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061044c9190610735565b506101e05160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156104a0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c49190610735565b505b610200516001600160a01b0316158015906104ec57506101e0516001600160a01b031615155b156105e357610200516101e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610544573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105689190610735565b50610200516101e05160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156105bd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e19190610735565b505b5061075b565b6040516101a081016001600160401b038111828210171561061857634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b0381168114610634575f5ffd5b919050565b5f6101a082840312801561064b575f5ffd5b506106546105e9565b61065d8361061e565b815261066b6020840161061e565b602082015261067c6040840161061e565b6040820152606083810151908201526106976080840161061e565b60808201526106a860a0840161061e565b60a08201526106b960c0840161061e565b60c08201526106ca60e0840161061e565b60e08201526106dc610100840161061e565b6101008201526106ef610120840161061e565b610120820152610702610140840161061e565b610140820152610715610160840161061e565b610160820152610728610180840161061e565b6101808201529392505050565b5f60208284031215610745575f5ffd5b81518015158114610754575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161343761095f5f395f8181611d1101528181611f9501528181612082015281816121ec015261226c01525f8181611c6501528181611dbb01528181611e3301528181611ee9015261215601525f6101b101525f6108d001525f6102d001525f61018c01525f6108ab01525f6102ab01525f8181612319015281816125b6015281816126b701528181612757015281816127ea015281816128c3015261294301525f50505f8181610fe6015281816110840152818161110c015281816118ef0152818161198d0152611a1501525f8181610d7c01528181610e1701528181611708015281816117a301528181611f1301528181611fbf0152818161253401526125e001525f81816103b80152818161049801528181610533015281816105db015281816106e201528181610a0501528181610aaa01528181610b7c01528181610c1701528181610cbf01528181610ef8015281816113900152818161143501528181611508015281816115a30152818161164b0152818161180101528181611c8f01528181611d3e01528181611e0c0152818161205301528181612343015281816123d4015281816124910152818161268a01528181612a8101528181612b1d01528181612cca0152612d6601526134375ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c8063d19cfecd11610058578063d19cfecd146100dd578063d5b6e490146100f0578063da52984114610103578063de1b7a8d14610116575f5ffd5b806367a3bea31461007e57806376681f2a146100b75780637b809dee146100ca575b5f5ffd5b61009161008c366004612f6f565b610129565b604080518251815260208084015190820152918101519082015260600160405180910390f35b6100916100c5366004612f6f565b610251565b6100916100d8366004612f6f565b61030c565b6100916100eb366004612f6f565b610851565b6100916100fe366004612f90565b61090c565b610091610111366004612fc8565b611296565b610091610124366004612fe2565b611bad565b61014a60405180606001604052805f81526020015f81526020015f81525090565b60025f54036101745760405162461bcd60e51b815260040161016b90612ff3565b60405180910390fd5b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610247928201906101ed9086018661303c565b61ffff168152602001846020016020810190610209919061306b565b6001600160a01b03168152602001610227606086016040870161303c565b61ffff168152602001846060013581526020018460800135815250612293565b60015f5592915050565b61027260405180606001604052805f81526020015f81526020015f81525090565b60025f54036102935760405162461bcd60e51b815260040161016b90612ff3565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610247928201906101ed9086018661303c565b61032d60405180606001604052805f81526020015f81526020015f81525090565b60025f540361034e5760405162461bcd60e51b815260040161016b90612ff3565b60025f908155608083013590036103785760405163162908e360e11b815260040160405180910390fd5b600261038a608084016060850161303c565b61ffff1610156103ad5760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76103ea602086018661306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561042c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104509190613086565b9050608083013561047b33308361046a602089018961306b565b6001600160a01b031692919061298c565b610488602085018561306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016104d59291906130d4565b6020604051808303815f875af11580156104f1573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051591906130fa565b50610523602085018561306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016105719291906130d4565b6020604051808303815f875af115801561058d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b191906130fa565b505f80805b6105c6608088016060890161303c565b61ffff16811015610791576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761060d60208a018a61306b565b8661061e60608c0160408d0161306b565b5f6040518563ffffffff1660e01b815260040161063e9493929190613115565b5f604051808303815f87803b158015610655575f5ffd5b505af1158015610667573d5f5f3e3d5ffd5b5050505083836106779190613156565b92505f6106a861068d60608a0160408b0161306b565b868861069f60408d0160208e0161303c565b61ffff16612a2b565b9050805f036106d8576106bc826001613156565b60405163235ffc1f60e01b815260040161016b91815260200190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61071460208b018b61306b565b8360025f8d604001602081019061072b919061306b565b6040518663ffffffff1660e01b815260040161074b95949392919061316f565b5f604051808303815f87803b158015610762575f5ffd5b505af1158015610774573d5f5f3e3d5ffd5b5050505080836107849190613156565b90945091506001016105b6565b505f6107a0602088018861306b565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156107e4573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080891906131a3565b905061082c338261081c60208b018b61306b565b6001600160a01b03169190612be5565b6040805160608101825293845260208401929092529082015260015f55949350505050565b61087260405180606001604052805f81526020015f81526020015f81525090565b60025f54036108935760405162461bcd60e51b815260040161016b90612ff3565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f000000000000000000000000000000000000000000000000000000000000000016602080830191909152610247928201906101ed9086018661303c565b61092d60405180606001604052805f81526020015f81526020015f81525090565b60025f540361094e5760405162461bcd60e51b815260040161016b90612ff3565b60025f90815560a083013590036109785760405163162908e360e11b815260040160405180910390fd5b600261098a608084016060850161303c565b61ffff1610156109ad5760405163204ec41160e21b815260040160405180910390fd5b6109bd606083016040840161306b565b6001600160a01b03166109d3602084018461306b565b6001600160a01b0316036109fa576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610a37602086018661306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610a79573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a9d9190613086565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610adf606087016040880161306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610b21573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b459190613086565b905060a0840135610b5f33308361046a60208a018a61306b565b610b6c602086018661306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610bb99291906130d4565b6020604051808303815f875af1158015610bd5573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bf991906130fa565b50610c07602086018661306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401610c559291906130d4565b6020604051808303815f875af1158015610c71573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9591906130fa565b505f80805b610caa6080890160608a0161303c565b61ffff168110156111ad576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610cf160208b018b61306b565b86610d0260a08d0160808e0161306b565b5f6040518563ffffffff1660e01b8152600401610d229493929190613115565b5f604051808303815f87803b158015610d39575f5ffd5b505af1158015610d4b573d5f5f3e3d5ffd5b505050508383610d5b9190613156565b92505f610eda610d7160a08b0160808c0161306b565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07610dae60208f018f61306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610df0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e1491906131a3565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6040016020810190610e57919061306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610e99573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ebd91906131a3565b8b8f6020016020810190610ed1919061303c565b61ffff16612c73565b9050805f03610eee576106bc826001613156565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad610f2d60608c0160408d0161306b565b8360025f8e6080016020810190610f44919061306b565b6040518663ffffffff1660e01b8152600401610f6495949392919061316f565b5f604051808303815f87803b158015610f7b575f5ffd5b505af1158015610f8d573d5f5f3e3d5ffd5b505050508083610f9d9190613156565b92506001610fb160808b0160608c0161303c565b610fbb91906131ba565b61ffff168210156111a457610fd660608a0160408b0161306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016110239291906130d4565b6020604051808303815f875af115801561103f573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061106391906130fa565b5061107460608a0160408b0161306b565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016110c19291906130d4565b6020604051808303815f875af11580156110dd573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061110191906130fa565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061113f60e08d018d6131d4565b855f6040518663ffffffff1660e01b815260040161116195949392919061321e565b6020604051808303815f875af115801561117d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111a191906131a3565b94505b50600101610c9a565b508660c001358210156111e05760405163593100b560e11b81526004810183905260c0880135602482015260440161016b565b5f6111f16060890160408a0161306b565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611235573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061125991906131a3565b9050611270338261081c60608c0160408d0161306b565b6040805160608101825293845260208401929092529082015260015f5595945050505050565b6112b760405180606001604052805f81526020015f81526020015f81525090565b60025f54036112d85760405162461bcd60e51b815260040161016b90612ff3565b60025f90815561010083013590036113035760405163162908e360e11b815260040160405180910390fd5b600261131560c0840160a0850161303c565b61ffff1610156113385760405163204ec41160e21b815260040160405180910390fd5b61134860a083016080840161306b565b6001600160a01b031661135e602084018461306b565b6001600160a01b031603611385576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76113c2602086018661306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611404573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114289190613086565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761146a60a087016080880161306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114ac573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114d09190613086565b90506101008401356114eb33308361046a60208a018a61306b565b6114f8602086018661306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016115459291906130d4565b6020604051808303815f875af1158015611561573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061158591906130fa565b50611593602086018661306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016115e19291906130d4565b6020604051808303815f875af11580156115fd573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061162191906130fa565b505f80805b61163660c0890160a08a0161303c565b61ffff16811015611aea576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761167d60208b018b61306b565b8661168e60608d0160408e0161306b565b5f6040518563ffffffff1660e01b81526004016116ae9493929190613115565b5f604051808303815f87803b1580156116c5575f5ffd5b505af11580156116d7573d5f5f3e3d5ffd5b5050505083836116e79190613156565b92505f6117e36116fd60608b0160408c0161306b565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f0761173a60208f018f61306b565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa15801561177c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117a091906131a3565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6080016020810190610e57919061306b565b9050805f036117f7576106bc826001613156565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61183660a08c0160808d0161306b565b8360025f8e604001602081019061184d919061306b565b6040518663ffffffff1660e01b815260040161186d95949392919061316f565b5f604051808303815f87803b158015611884575f5ffd5b505af1158015611896573d5f5f3e3d5ffd5b5050505080836118a69190613156565b925060016118ba60c08b0160a08c0161303c565b6118c491906131ba565b61ffff16821015611ae1576118df60a08a0160808b0161306b565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b815260040161192c9291906130d4565b6020604051808303815f875af1158015611948573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196c91906130fa565b5061197d60a08a0160808b0161306b565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016119ca9291906130d4565b6020604051808303815f875af11580156119e6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a0a91906130fa565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca30611a4b60e08d0160c08e0161306b565b611a5b60808e0160608f0161326d565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af1158015611aba573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ade91906131a3565b94505b50600101611626565b508660e00135821015611b1d5760405163593100b560e11b81526004810183905260e0880135602482015260440161016b565b5f611b2e60a0890160808a0161306b565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611b72573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b9691906131a3565b9050611270338261081c60a08c0160808d0161306b565b611bce60405180606001604052805f81526020015f81526020015f81525090565b60025f5403611bef5760405162461bcd60e51b815260040161016b90612ff3565b60025f90815560608301359003611c195760405163162908e360e11b815260040160405180910390fd5b6002611c2b606084016040850161303c565b61ffff161015611c4e5760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015611cd6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cfa9190613086565b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015611d83573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611da79190613086565b90506060840135611de36001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461298c565b5f80805b611df76060890160408a0161303c565b61ffff168110156121d4576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0377f000000000000000000000000000000000000000000000000000000000000000086611e6360408d0160208e0161306b565b5f6040518563ffffffff1660e01b8152600401611e839493929190613115565b5f604051808303815f87803b158015611e9a575f5ffd5b505af1158015611eac573d5f5f3e3d5ffd5b505050508383611ebc9190613156565b92505f61203d611ed260408b0160208c0161306b565b60405163b3596f0760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015288917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015611f5a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f7e91906131a3565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528c917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612006573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061202a91906131a3565b8b8f5f016020810190610ed1919061303c565b9050805f03612051576106bc826001613156565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a415bcad7f00000000000000000000000000000000000000000000000000000000000000008360025f8e60200160208101906120b8919061306b565b6040518663ffffffff1660e01b81526004016120d895949392919061316f565b5f604051808303815f87803b1580156120ef575f5ffd5b505af1158015612101573d5f5f3e3d5ffd5b5050505080836121119190613156565b9250600161212560608b0160408c0161303c565b61212f91906131ba565b61ffff168210156121cb57604051636e553f6560e01b8152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af11580156121a4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121c891906131a3565b94505b50600101611de7565b506040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612239573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061225d91906131a3565b90506112706001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612be5565b6122b460405180606001604052805f81526020015f81526020015f81525090565b8160c001515f036122d85760405163162908e360e11b815260040160405180910390fd5b6002826080015161ffff1610156123025760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa15801561238a573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123ae9190613086565b835160405163c44b11f760e01b81526001600160a01b0391821660048201529192505f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa15801561241b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061243f9190613086565b60c085015185519192509061245f906001600160a01b031633308461298c565b5f80805b876080015161ffff16811015612876578751606089015160405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263617ba037926124c9928991905f90600401613115565b5f604051808303815f87803b1580156124e0575f5ffd5b505af11580156124f2573d5f5f3e3d5ffd5b5050505083836125029190613156565b6060890151895160405163b3596f0760e01b81526001600160a01b0391821660048201529295505f9261265a929188917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa15801561257b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061259f91906131a3565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528b917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612627573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061264b91906131a3565b8c8f6040015161ffff16612c73565b9050805f0361266e576106bc826001613156565b606089015160405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a415bcad916126e7917f00000000000000000000000000000000000000000000000000000000000000009186916002915f919060040161316f565b5f604051808303815f87803b1580156126fe575f5ffd5b505af1158015612710573d5f5f3e3d5ffd5b5050505080836127209190613156565b92506001896080015161273391906131ba565b61ffff1682101561286d57885160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b39161278d919085906004016130d4565b6020604051808303815f875af11580156127a9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127cd91906130fa565b506020890151604051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490525f604483015290911690630efe6a8b906064016020604051808303815f875af1158015612846573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061286a91906131a3565b94505b50600101612463565b508660a001518210156128ac5760a087015160405163593100b560e11b815261016b918491600401918252602082015260400190565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612910573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061293491906131a3565b905061296a6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612be5565b6040805160608101825293845260208401929092529082015295945050505050565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af16129ce573d5f5f3e3d5ffd5b506129d885612e51565b612a245760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d00000000000000604482015260640161016b565b5050505050565b81515f9060301c60ff1681612a4182600a61336b565b612a5390670de0b6b3a7640000613376565b612a5d9087613395565b60405163eddf1b7960e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612ac6573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612aea91906131a3565b90505f8160ff165f03612b0557865160101c61ffff16612b97565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612b6a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b8e91906133ac565b6020015161ffff165b90505f612bad612ba78584612ef4565b88612f2a565b9050670de0b6b3a7640000612bc386600a61336b565b612bcd9083613395565b612bd79190613376565b9a9950505050505050505050565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af1612c1f573d5f5f3e3d5ffd5b50612c2984612e51565b612c6d5760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b604482015260640161016b565b50505050565b83515f90819060301c60ff16612c8a90600a61336b565b612c9c90670de0b6b3a7640000613376565b612ca69089613395565b60405163eddf1b7960e01b81526001600160a01b038b811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612d0f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d3391906131a3565b90505f8160ff165f03612d4e57875160101c61ffff16612de0565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612db3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612dd791906133ac565b6020015161ffff165b90505f612df6612df08584612ef4565b87612f2a565b90505f612e0c612e068c84612ef4565b8a612f2a565b8851909150670de0b6b3a76400009060301c60ff16612e2c90600a61336b565b612e369083613395565b612e409190613376565b9d9c50505050505050505050505050565b5f612e73565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d8015612eb25760208114612ee357612ead7f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612e57565b612eee565b823b612eda57612eda7311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612e57565b60019150612eee565b3d5f5f3e5f51151591505b50919050565b5f81156706f05b59d3b200001983900484111517612f10575f5ffd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715612f48575f5ffd5b50670de0b6b3a76400009190910260028204010490565b5f60a08284031215612eee575f5ffd5b5f60a08284031215612f7f575f5ffd5b612f898383612f5f565b9392505050565b5f60208284031215612fa0575f5ffd5b813567ffffffffffffffff811115612fb6575f5ffd5b82016101008185031215612f89575f5ffd5b5f610120828403128015612fda575f5ffd5b509092915050565b5f6080828403128015612fda575f5ffd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff81168114613039575f5ffd5b50565b5f6020828403121561304c575f5ffd5b8135612f898161302a565b6001600160a01b0381168114613039575f5ffd5b5f6020828403121561307b575f5ffd5b8135612f8981613057565b5f6020828403128015613097575f5ffd5b506040516020810167ffffffffffffffff811182821017156130c757634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b6001600160a01b03929092168252602082015260400190565b8015158114613039575f5ffd5b5f6020828403121561310a575f5ffd5b8151612f89816130ed565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561316957613169613142565b92915050565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b5f602082840312156131b3575f5ffd5b5051919050565b61ffff828116828216039081111561316957613169613142565b5f5f8335601e198436030181126131e9575f5ffd5b83018035915067ffffffffffffffff821115613203575f5ffd5b602001915036819003821315613217575f5ffd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f6020828403121561327d575f5ffd5b8135612f89816130ed565b6001815b60018411156132c3578085048111156132a7576132a7613142565b60018416156132b557908102905b60019390931c92800261328c565b935093915050565b5f826132d957506001613169565b816132e557505f613169565b81600181146132fb576002811461330557613321565b6001915050613169565b60ff84111561331657613316613142565b50506001821b613169565b5060208310610133831016604e8410600b8410161715613344575081810a613169565b6133505f198484613288565b805f190482111561336357613363613142565b029392505050565b5f612f8983836132cb565b5f8261339057634e487b7160e01b5f52601260045260245ffd5b500490565b808202811582820484141761316957613169613142565b5f60608284031280156133bd575f5ffd5b506040516060810167ffffffffffffffff811182821017156133ed57634e487b7160e01b5f52604160045260245ffd5b60405282516133fb8161302a565b8152602083015161340b8161302a565b6020820152604083015161341e8161302a565b6040820152939250505056fea164736f6c634300081c000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(params, overrides || {}) as Promise<Looping>;
  }
  override getDeployTransaction(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
