/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface, LoopDataTypes } from '../Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopConstructorParams',
        components: [
          {
            name: 'aavePool',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'priceOracle',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'swapRouter',
            type: 'address',
            internalType: 'contract ISwapRouter',
          },
          {
            name: 'oracleDecimals',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'pUSD',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nALPHA',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nINSTO',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nBASIS',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nETF',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nALPHATeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nINSTOTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nBASISTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'nETFTeller',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'sPLUME',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'WPLUME',
            type: 'address',
            internalType: 'address',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNALPHA',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNALPHAParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNBASIS',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNBASISParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNETF',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNETFParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopNINSTO',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopNINSTOParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSPLUME',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSPLUMEParams',
        components: [
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'onBehalfOf',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'tuple',
        internalType: 'struct LoopDataTypes.LoopData',
        components: [
          {
            name: 'supplyAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'borrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'leftoverBorrowAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'error',
    name: 'InsufficientFundsToCompleteLoops',
    inputs: [
      {
        name: 'failedAtLoop',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x610260604052348015610010575f5ffd5b50604051613fc3380380613fc383398101604081905261002f91610753565b60015f5580516001600160a01b0390811660809081526020830151821660a09081526040840151831660c0908152606085015160e09081529285015184166101009081529185015184166101208181529186015185166101409081529386015185166101609081529286015185166101809081529186015185166101a09081529386015185166101c09081529286015185166101e052908501518416610200529184015183166102205283015190911661024052156101d8576101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561013a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061015e9190610875565b506101205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156101b2573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101d69190610875565b505b610140516001600160a01b0316156102da576101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561023c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102609190610875565b506101405160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156102b4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102d89190610875565b505b610160516001600160a01b0316156103dc576101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561033e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103629190610875565b506101605160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156103b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103da9190610875565b505b610180516001600160a01b0316156104de576101805160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610440573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104649190610875565b506101805160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156104b8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104dc9190610875565b505b610220516001600160a01b0316156105e0576102205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af1158015610542573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105669190610875565b506102205160805160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156105ba573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105de9190610875565b505b610240516001600160a01b0316158015906106065750610220516001600160a01b031615155b156106fd57610240516102205160405163095ea7b360e01b81526001600160a01b0391821660048201525f602482015291169063095ea7b3906044016020604051808303815f875af115801561065e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106829190610875565b50610240516102205160405163095ea7b360e01b81526001600160a01b0391821660048201525f19602482015291169063095ea7b3906044016020604051808303815f875af11580156106d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106fb9190610875565b505b5061089b565b6040516101e081016001600160401b038111828210171561073257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811461074e575f5ffd5b919050565b5f6101e0828403128015610765575f5ffd5b5061076e610703565b61077783610738565b815261078560208401610738565b602082015261079660408401610738565b6040820152606083810151908201526107b160808401610738565b60808201526107c260a08401610738565b60a08201526107d360c08401610738565b60c08201526107e460e08401610738565b60e08201526107f66101008401610738565b6101008201526108096101208401610738565b61012082015261081c6101408401610738565b61014082015261082f6101608401610738565b6101608201526108426101808401610738565b6101808201526108556101a08401610738565b6101a08201526108686101c08401610738565b6101c08201529392505050565b5f60208284031215610885575f5ffd5b81518015158114610894575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e051610200516102205161024051613510610ab35f395f8181611dea0152818161206e0152818161215b015281816122c5015261234501525f8181611d3e01528181611e9401528181611f0c01528181611fc2015261222f01525f6101cf01525f6102ee01525f6109a901525f6103a901525f6101aa01525f6102c901525f61098401525f61038401525f81816123f20152818161268f0152818161279001528181612830015281816128c30152818161299c0152612a1c01525f50505f81816110bf0152818161115d015281816111e5015281816119c801528181611a660152611aee01525f8181610e5501528181610ef0015281816117e10152818161187c01528181611fec015281816120980152818161260d01526126b901525f8181610491015281816105710152818161060c015281816106b4015281816107bb01528181610ade01528181610b8301528181610c5501528181610cf001528181610d9801528181610fd1015281816114690152818161150e015281816115e10152818161167c01528181611724015281816118da01528181611d6801528181611e1701528181611ee50152818161212c0152818161241c015281816124ad0152818161256a0152818161276301528181612b5a01528181612bf601528181612da30152612e3f01526135105ff3fe608060405234801561000f575f5ffd5b5060043610610085575f3560e01c806391f7d0e21161005857806391f7d0e2146100fb578063d5b6e4901461010e578063da52984114610121578063de1b7a8d14610134575f5ffd5b80630d848ae41461008957806339dfc569146100c25780637454701e146100d55780637b809dee146100e8575b5f5ffd5b61009c610097366004613048565b610147565b604080518251815260208084015190820152918101519082015260600160405180910390f35b61009c6100d0366004613048565b61026f565b61009c6100e3366004613048565b61032a565b61009c6100f6366004613048565b6103e5565b61009c610109366004613048565b61092a565b61009c61011c366004613069565b6109e5565b61009c61012f3660046130a1565b61136f565b61009c6101423660046130bb565b611c86565b61016860405180606001604052805f81526020015f81526020015f81525090565b60025f54036101925760405162461bcd60e51b8152600401610189906130cc565b60405180910390fd5b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020808301919091526102659282019061020b90860186613115565b61ffff1681526020018460200160208101906102279190613144565b6001600160a01b031681526020016102456060860160408701613115565b61ffff16815260200184606001358152602001846080013581525061236c565b60015f5592915050565b61029060405180606001604052805f81526020015f81526020015f81525090565b60025f54036102b15760405162461bcd60e51b8152600401610189906130cc565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020808301919091526102659282019061020b90860186613115565b61034b60405180606001604052805f81526020015f81526020015f81525090565b60025f540361036c5760405162461bcd60e51b8152600401610189906130cc565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020808301919091526102659282019061020b90860186613115565b61040660405180606001604052805f81526020015f81526020015f81525090565b60025f54036104275760405162461bcd60e51b8152600401610189906130cc565b60025f908155608083013590036104515760405163162908e360e11b815260040160405180910390fd5b60026104636080840160608501613115565b61ffff1610156104865760405163204ec41160e21b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76104c36020860186613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610505573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610529919061315f565b905060808301356105543330836105436020890189613144565b6001600160a01b0316929190612a65565b6105616020850185613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016105ae9291906131ad565b6020604051808303815f875af11580156105ca573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ee91906131d3565b506105fc6020850185613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b815260040161064a9291906131ad565b6020604051808303815f875af1158015610666573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068a91906131d3565b505f80805b61069f6080880160608901613115565b61ffff1681101561086a576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0376106e660208a018a613144565b866106f760608c0160408d01613144565b5f6040518563ffffffff1660e01b815260040161071794939291906131ee565b5f604051808303815f87803b15801561072e575f5ffd5b505af1158015610740573d5f5f3e3d5ffd5b505050508383610750919061322f565b92505f61078161076660608a0160408b01613144565b868861077860408d0160208e01613115565b61ffff16612b04565b9050805f036107b15761079582600161322f565b60405163235ffc1f60e01b815260040161018991815260200190565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad6107ed60208b018b613144565b8360025f8d60400160208101906108049190613144565b6040518663ffffffff1660e01b8152600401610824959493929190613248565b5f604051808303815f87803b15801561083b575f5ffd5b505af115801561084d573d5f5f3e3d5ffd5b50505050808361085d919061322f565b909450915060010161068f565b505f6108796020880188613144565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156108bd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e1919061327c565b905061090533826108f560208b018b613144565b6001600160a01b03169190612cbe565b6040805160608101825293845260208401929092529082015260015f55949350505050565b61094b60405180606001604052805f81526020015f81526020015f81525090565b60025f540361096c5760405162461bcd60e51b8152600401610189906130cc565b60025f556040805160e0810182526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811682527f0000000000000000000000000000000000000000000000000000000000000000166020808301919091526102659282019061020b90860186613115565b610a0660405180606001604052805f81526020015f81526020015f81525090565b60025f5403610a275760405162461bcd60e51b8152600401610189906130cc565b60025f90815560a08301359003610a515760405163162908e360e11b815260040160405180910390fd5b6002610a636080840160608501613115565b61ffff161015610a865760405163204ec41160e21b815260040160405180910390fd5b610a966060830160408401613144565b6001600160a01b0316610aac6020840184613144565b6001600160a01b031603610ad3576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610b106020860186613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610b52573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b76919061315f565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f7610bb86060870160408801613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610bfa573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c1e919061315f565b905060a0840135610c3833308361054360208a018a613144565b610c456020860186613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401610c929291906131ad565b6020604051808303815f875af1158015610cae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cd291906131d3565b50610ce06020860186613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b8152600401610d2e9291906131ad565b6020604051808303815f875af1158015610d4a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d6e91906131d3565b505f80805b610d836080890160608a01613115565b61ffff16811015611286576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610dca60208b018b613144565b86610ddb60a08d0160808e01613144565b5f6040518563ffffffff1660e01b8152600401610dfb94939291906131ee565b5f604051808303815f87803b158015610e12575f5ffd5b505af1158015610e24573d5f5f3e3d5ffd5b505050508383610e34919061322f565b92505f610fb3610e4a60a08b0160808c01613144565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f07610e8760208f018f613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610ec9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eed919061327c565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6040016020810190610f309190613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610f72573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f96919061327c565b8b8f6020016020810190610faa9190613115565b61ffff16612d4c565b9050805f03610fc75761079582600161322f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61100660608c0160408d01613144565b8360025f8e608001602081019061101d9190613144565b6040518663ffffffff1660e01b815260040161103d959493929190613248565b5f604051808303815f87803b158015611054575f5ffd5b505af1158015611066573d5f5f3e3d5ffd5b505050508083611076919061322f565b9250600161108a60808b0160608c01613115565b6110949190613293565b61ffff1682101561127d576110af60608a0160408b01613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b81526004016110fc9291906131ad565b6020604051808303815f875af1158015611118573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061113c91906131d3565b5061114d60608a0160408b01613144565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161119a9291906131ad565b6020604051808303815f875af11580156111b6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111da91906131d3565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061121860e08d018d6132ad565b855f6040518663ffffffff1660e01b815260040161123a9594939291906132f7565b6020604051808303815f875af1158015611256573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061127a919061327c565b94505b50600101610d73565b508660c001358210156112b95760405163593100b560e11b81526004810183905260c08801356024820152604401610189565b5f6112ca6060890160408a01613144565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561130e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611332919061327c565b905061134933826108f560608c0160408d01613144565b6040805160608101825293845260208401929092529082015260015f5595945050505050565b61139060405180606001604052805f81526020015f81526020015f81525090565b60025f54036113b15760405162461bcd60e51b8152600401610189906130cc565b60025f90815561010083013590036113dc5760405163162908e360e11b815260040160405180910390fd5b60026113ee60c0840160a08501613115565b61ffff1610156114115760405163204ec41160e21b815260040160405180910390fd5b61142160a0830160808401613144565b6001600160a01b03166114376020840184613144565b6001600160a01b03160361145e576040516333910aef60e11b815260040160405180910390fd5b5f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761149b6020860186613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa1580156114dd573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611501919061315f565b90505f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f761154360a0870160808801613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611585573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115a9919061315f565b90506101008401356115c433308361054360208a018a613144565b6115d16020860186613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b815260040161161e9291906131ad565b6020604051808303815f875af115801561163a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165e91906131d3565b5061166c6020860186613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f196040518363ffffffff1660e01b81526004016116ba9291906131ad565b6020604051808303815f875af11580156116d6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fa91906131d3565b505f80805b61170f60c0890160a08a01613115565b61ffff16811015611bc3576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761175660208b018b613144565b8661176760608d0160408e01613144565b5f6040518563ffffffff1660e01b815260040161178794939291906131ee565b5f604051808303815f87803b15801561179e575f5ffd5b505af11580156117b0573d5f5f3e3d5ffd5b5050505083836117c0919061322f565b92505f6118bc6117d660608b0160408c01613144565b866001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663b3596f0761181360208f018f613144565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015611855573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611879919061327c565b8a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3596f078f6080016020810190610f309190613144565b9050805f036118d05761079582600161322f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61190f60a08c0160808d01613144565b8360025f8e60400160208101906119269190613144565b6040518663ffffffff1660e01b8152600401611946959493929190613248565b5f604051808303815f87803b15801561195d575f5ffd5b505af115801561196f573d5f5f3e3d5ffd5b50505050808361197f919061322f565b9250600161199360c08b0160a08c01613115565b61199d9190613293565b61ffff16821015611bba576119b860a08a0160808b01613144565b6001600160a01b031663095ea7b37f00000000000000000000000000000000000000000000000000000000000000005f6040518363ffffffff1660e01b8152600401611a059291906131ad565b6020604051808303815f875af1158015611a21573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a4591906131d3565b50611a5660a08a0160808b01613144565b6001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611aa39291906131ad565b6020604051808303815f875af1158015611abf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ae391906131d3565b506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca30611b2460e08d0160c08e01613144565b611b3460808e0160608f01613346565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af1158015611b93573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bb7919061327c565b94505b506001016116ff565b508660e00135821015611bf65760405163593100b560e11b81526004810183905260e08801356024820152604401610189565b5f611c0760a0890160808a01613144565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611c4b573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c6f919061327c565b905061134933826108f560a08c0160808d01613144565b611ca760405180606001604052805f81526020015f81526020015f81525090565b60025f5403611cc85760405162461bcd60e51b8152600401610189906130cc565b60025f90815560608301359003611cf25760405163162908e360e11b815260040160405180910390fd5b6002611d046060840160408501613115565b61ffff161015611d275760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015611daf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611dd3919061315f565b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015611e5c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e80919061315f565b90506060840135611ebc6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333084612a65565b5f80805b611ed06060890160408a01613115565b61ffff168110156122ad576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0377f000000000000000000000000000000000000000000000000000000000000000086611f3c60408d0160208e01613144565b5f6040518563ffffffff1660e01b8152600401611f5c94939291906131ee565b5f604051808303815f87803b158015611f73575f5ffd5b505af1158015611f85573d5f5f3e3d5ffd5b505050508383611f95919061322f565b92505f612116611fab60408b0160208c01613144565b60405163b3596f0760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015288917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612033573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612057919061327c565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528c917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa1580156120df573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612103919061327c565b8b8f5f016020810190610faa9190613115565b9050805f0361212a5761079582600161322f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a415bcad7f00000000000000000000000000000000000000000000000000000000000000008360025f8e60200160208101906121919190613144565b6040518663ffffffff1660e01b81526004016121b1959493929190613248565b5f604051808303815f87803b1580156121c8575f5ffd5b505af11580156121da573d5f5f3e3d5ffd5b5050505080836121ea919061322f565b925060016121fe60608b0160408c01613115565b6122089190613293565b61ffff168210156122a457604051636e553f6560e01b8152600481018290523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af115801561227d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122a1919061327c565b94505b50600101611ec0565b506040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612312573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612336919061327c565b90506113496001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612cbe565b61238d60405180606001604052805f81526020015f81526020015f81525090565b8160c001515f036123b15760405163162908e360e11b815260040160405180910390fd5b6002826080015161ffff1610156123db5760405163204ec41160e21b815260040160405180910390fd5b60405163c44b11f760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa158015612463573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612487919061315f565b835160405163c44b11f760e01b81526001600160a01b0391821660048201529192505f917f00000000000000000000000000000000000000000000000000000000000000009091169063c44b11f790602401602060405180830381865afa1580156124f4573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612518919061315f565b60c0850151855191925090612538906001600160a01b0316333084612a65565b5f80805b876080015161ffff1681101561294f578751606089015160405163617ba03760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263617ba037926125a2928991905f906004016131ee565b5f604051808303815f87803b1580156125b9575f5ffd5b505af11580156125cb573d5f5f3e3d5ffd5b5050505083836125db919061322f565b6060890151895160405163b3596f0760e01b81526001600160a01b0391821660048201529295505f92612733929188917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612654573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612678919061327c565b60405163b3596f0760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528b917f00000000000000000000000000000000000000000000000000000000000000009091169063b3596f0790602401602060405180830381865afa158015612700573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612724919061327c565b8c8f6040015161ffff16612d4c565b9050805f036127475761079582600161322f565b606089015160405163a415bcad60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163a415bcad916127c0917f00000000000000000000000000000000000000000000000000000000000000009186916002915f9190600401613248565b5f604051808303815f87803b1580156127d7575f5ffd5b505af11580156127e9573d5f5f3e3d5ffd5b5050505080836127f9919061322f565b92506001896080015161280c9190613293565b61ffff1682101561294657885160405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163095ea7b391612866919085906004016131ad565b6020604051808303815f875af1158015612882573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128a691906131d3565b506020890151604051630efe6a8b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490525f604483015290911690630efe6a8b906064016020604051808303815f875af115801561291f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612943919061327c565b94505b5060010161253c565b508660a001518210156129855760a087015160405163593100b560e11b8152610189918491600401918252602082015260400190565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156129e9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a0d919061327c565b9050612a436001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163383612cbe565b6040805160608101825293845260208401929092529082015295945050505050565b6040516323b872dd60e01b8082526001600160a01b0385811660048401528416602483015260448201839052905f80606483828a5af1612aa7573d5f5f3e3d5ffd5b50612ab185612f2a565b612afd5760405162461bcd60e51b815260206004820152601960248201527f475076323a206661696c6564207472616e7366657246726f6d000000000000006044820152606401610189565b5050505050565b81515f9060301c60ff1681612b1a82600a613444565b612b2c90670de0b6b3a764000061344f565b612b36908761346e565b60405163eddf1b7960e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612b9f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bc3919061327c565b90505f8160ff165f03612bde57865160101c61ffff16612c70565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612c43573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c679190613485565b6020015161ffff165b90505f612c86612c808584612fcd565b88613003565b9050670de0b6b3a7640000612c9c86600a613444565b612ca6908361346e565b612cb0919061344f565b9a9950505050505050505050565b60405163a9059cbb60e01b8082526001600160a01b038416600483015260248201839052905f8060448382895af1612cf8573d5f5f3e3d5ffd5b50612d0284612f2a565b612d465760405162461bcd60e51b815260206004820152601560248201527423a83b191d103330b4b632b2103a3930b739b332b960591b6044820152606401610189565b50505050565b83515f90819060301c60ff16612d6390600a613444565b612d7590670de0b6b3a764000061344f565b612d7f908961346e565b60405163eddf1b7960e01b81526001600160a01b038b811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063eddf1b7990602401602060405180830381865afa158015612de8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e0c919061327c565b90505f8160ff165f03612e2757875160101c61ffff16612eb9565b60405163b286f46760e01b815260ff831660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b286f46790602401606060405180830381865afa158015612e8c573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612eb09190613485565b6020015161ffff165b90505f612ecf612ec98584612fcd565b87613003565b90505f612ee5612edf8c84612fcd565b8a613003565b8851909150670de0b6b3a76400009060301c60ff16612f0590600a613444565b612f0f908361346e565b612f19919061344f565b9d9c50505050505050505050505050565b5f612f4c565b62461bcd60e51b5f52602060045280602452508060445260645ffd5b3d8015612f8b5760208114612fbc57612f867f475076323a206d616c666f726d6564207472616e7366657220726573756c7400601f612f30565b612fc7565b823b612fb357612fb37311d41d8c8e881b9bdd08184818dbdb9d1c9858dd60621b6014612f30565b60019150612fc7565b3d5f5f3e5f51151591505b50919050565b5f81156706f05b59d3b200001983900484111517612fe9575f5ffd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a764000060028404190484111715613021575f5ffd5b50670de0b6b3a76400009190910260028204010490565b5f60a08284031215612fc7575f5ffd5b5f60a08284031215613058575f5ffd5b6130628383613038565b9392505050565b5f60208284031215613079575f5ffd5b813567ffffffffffffffff81111561308f575f5ffd5b82016101008185031215613062575f5ffd5b5f6101208284031280156130b3575f5ffd5b509092915050565b5f60808284031280156130b3575f5ffd5b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b61ffff81168114613112575f5ffd5b50565b5f60208284031215613125575f5ffd5b813561306281613103565b6001600160a01b0381168114613112575f5ffd5b5f60208284031215613154575f5ffd5b813561306281613130565b5f6020828403128015613170575f5ffd5b506040516020810167ffffffffffffffff811182821017156131a057634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b6001600160a01b03929092168252602082015260400190565b8015158114613112575f5ffd5b5f602082840312156131e3575f5ffd5b8151613062816131c6565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b808201808211156132425761324261321b565b92915050565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b5f6020828403121561328c575f5ffd5b5051919050565b61ffff82811682821603908111156132425761324261321b565b5f5f8335601e198436030181126132c2575f5ffd5b83018035915067ffffffffffffffff8211156132dc575f5ffd5b6020019150368190038213156132f0575f5ffd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f60208284031215613356575f5ffd5b8135613062816131c6565b6001815b600184111561339c578085048111156133805761338061321b565b600184161561338e57908102905b60019390931c928002613365565b935093915050565b5f826133b257506001613242565b816133be57505f613242565b81600181146133d457600281146133de576133fa565b6001915050613242565b60ff8411156133ef576133ef61321b565b50506001821b613242565b5060208310610133831016604e8410600b841016171561341d575081810a613242565b6134295f198484613361565b805f190482111561343c5761343c61321b565b029392505050565b5f61306283836133a4565b5f8261346957634e487b7160e01b5f52601260045260245ffd5b500490565b80820281158282048414176132425761324261321b565b5f6060828403128015613496575f5ffd5b506040516060810167ffffffffffffffff811182821017156134c657634e487b7160e01b5f52604160045260245ffd5b60405282516134d481613103565b815260208301516134e481613103565b602082015260408301516134f781613103565b6040820152939250505056fea164736f6c634300081c000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(params, overrides || {}) as Promise<Looping>;
  }
  override getDeployTransaction(
    params: LoopDataTypes.LoopConstructorParamsStruct,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(params, overrides || {});
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
