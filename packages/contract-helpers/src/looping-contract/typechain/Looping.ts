/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from './common';

export declare namespace LoopDataTypes {
  export type LoopMultiSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    borrowToken: string;
    numLoops: BigNumberish;
    onBehalfOf: string;
    initialAmount: BigNumberish;
    minAmountSupplied: BigNumberish;
    path: BytesLike;
  };

  export type LoopMultiSwapParamsStructOutput = [
    string,
    number,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    string,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    borrowToken: string;
    numLoops: number;
    onBehalfOf: string;
    initialAmount: BigNumber;
    minAmountSupplied: BigNumber;
    path: string;
  };

  export type LoopDataStruct = {
    supplyAmount: BigNumberish;
    borrowAmount: BigNumberish;
    leftoverBorrowAmount: BigNumberish;
  };

  export type LoopDataStructOutput = [BigNumber, BigNumber, BigNumber] & {
    supplyAmount: BigNumber;
    borrowAmount: BigNumber;
    leftoverBorrowAmount: BigNumber;
  };

  export type LoopNRWAParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopNRWAParamsStructOutput = [
    number,
    string,
    number,
    BigNumber,
    BigNumber,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
  };

  export type LoopPUSDParamsStruct = {
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopPUSDParamsStructOutput = [
    number,
    string,
    number,
    BigNumber,
    BigNumber,
  ] & {
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
  };

  export type LoopSingleAssetParamsStruct = {
    token: string;
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    numLoops: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopSingleAssetParamsStructOutput = [
    string,
    number,
    string,
    number,
    BigNumber,
  ] & {
    token: string;
    targetHealthFactor: number;
    onBehalfOf: string;
    numLoops: number;
    initialAmount: BigNumber;
  };

  export type LoopSingleSwapParamsStruct = {
    supplyToken: string;
    targetHealthFactor: BigNumberish;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: BigNumberish;
    maverickPool: string;
    minAmountSupplied: BigNumberish;
    initialAmount: BigNumberish;
  };

  export type LoopSingleSwapParamsStructOutput = [
    string,
    number,
    string,
    boolean,
    string,
    number,
    string,
    BigNumber,
    BigNumber,
  ] & {
    supplyToken: string;
    targetHealthFactor: number;
    onBehalfOf: string;
    isSupplyTokenA: boolean;
    borrowToken: string;
    numLoops: number;
    maverickPool: string;
    minAmountSupplied: BigNumber;
    initialAmount: BigNumber;
  };
}

export interface LoopingInterface extends utils.Interface {
  functions: {
    'loopMultiSwap((address,uint16,address,uint16,address,uint256,uint256,bytes))': FunctionFragment;
    'loopNRWA((uint16,address,uint16,uint256,uint256))': FunctionFragment;
    'loopPUSD((uint16,address,uint16,uint256,uint256))': FunctionFragment;
    'loopSingleAsset((address,uint16,address,uint16,uint256))': FunctionFragment;
    'loopSingleSwap((address,uint16,address,bool,address,uint16,address,uint256,uint256))': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'loopMultiSwap'
      | 'loopNRWA'
      | 'loopPUSD'
      | 'loopSingleAsset'
      | 'loopSingleSwap',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'loopMultiSwap',
    values: [LoopDataTypes.LoopMultiSwapParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopNRWA',
    values: [LoopDataTypes.LoopNRWAParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopPUSD',
    values: [LoopDataTypes.LoopPUSDParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopSingleAsset',
    values: [LoopDataTypes.LoopSingleAssetParamsStruct],
  ): string;
  encodeFunctionData(
    functionFragment: 'loopSingleSwap',
    values: [LoopDataTypes.LoopSingleSwapParamsStruct],
  ): string;

  decodeFunctionResult(
    functionFragment: 'loopMultiSwap',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'loopNRWA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'loopPUSD', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'loopSingleAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'loopSingleSwap',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface Looping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoopingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    loopMultiSwap(
      params: LoopDataTypes.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopNRWA(
      params: LoopDataTypes.LoopNRWAParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopPUSD(
      params: LoopDataTypes.LoopPUSDParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopSingleAsset(
      params: LoopDataTypes.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    loopSingleSwap(
      params: LoopDataTypes.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;
  };

  loopMultiSwap(
    params: LoopDataTypes.LoopMultiSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopNRWA(
    params: LoopDataTypes.LoopNRWAParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopPUSD(
    params: LoopDataTypes.LoopPUSDParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopSingleAsset(
    params: LoopDataTypes.LoopSingleAssetParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  loopSingleSwap(
    params: LoopDataTypes.LoopSingleSwapParamsStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  callStatic: {
    loopMultiSwap(
      params: LoopDataTypes.LoopMultiSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopNRWA(
      params: LoopDataTypes.LoopNRWAParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopPUSD(
      params: LoopDataTypes.LoopPUSDParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopSingleAsset(
      params: LoopDataTypes.LoopSingleAssetParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;

    loopSingleSwap(
      params: LoopDataTypes.LoopSingleSwapParamsStruct,
      overrides?: CallOverrides,
    ): Promise<LoopDataTypes.LoopDataStructOutput>;
  };

  filters: {};

  estimateGas: {
    loopMultiSwap(
      params: LoopDataTypes.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopNRWA(
      params: LoopDataTypes.LoopNRWAParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopPUSD(
      params: LoopDataTypes.LoopPUSDParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopSingleAsset(
      params: LoopDataTypes.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    loopSingleSwap(
      params: LoopDataTypes.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    loopMultiSwap(
      params: LoopDataTypes.LoopMultiSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopNRWA(
      params: LoopDataTypes.LoopNRWAParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopPUSD(
      params: LoopDataTypes.LoopPUSDParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopSingleAsset(
      params: LoopDataTypes.LoopSingleAssetParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    loopSingleSwap(
      params: LoopDataTypes.LoopSingleSwapParamsStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;
  };
}
