/* Autogenerated file. Do not edit manually. */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from 'ethers';
import type { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Looping, LoopingInterface } from './Looping';

const _abi = [
  {
    type: 'constructor',
    inputs: [
      {
        name: '_aavePool',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_priceOracle',
        type: 'address',
        internalType: 'address',
      },
      {
        name: '_maverickV2Router',
        type: 'address',
        internalType: 'address payable',
      },
      {
        name: '_oracleDecimals',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'aavePool',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPool',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'calculateBorrowAmount',
    inputs: [
      {
        name: 'supplyAmount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'supplyToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'borrowToken',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ltv',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'calculateBorrowAmountSingleAsset',
    inputs: [
      {
        name: 'amount',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'token',
        type: 'address',
        internalType: 'address',
      },
      {
        name: 'ltv',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'targetHealthFactor',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'loopMultiSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopMultiSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'path',
            type: 'bytes',
            internalType: 'bytes',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleAsset',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopSingleAssetParams',
        components: [
          {
            name: 'token',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'loopSingleSwap',
    inputs: [
      {
        name: 'params',
        type: 'tuple',
        internalType: 'struct Looping.LoopSingleSwapParams',
        components: [
          {
            name: 'supplyToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'targetHealthFactor',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'isSupplyTokenA',
            type: 'bool',
            internalType: 'bool',
          },
          {
            name: 'borrowToken',
            type: 'address',
            internalType: 'address',
          },
          {
            name: 'numLoops',
            type: 'uint16',
            internalType: 'uint16',
          },
          {
            name: 'maverickPool',
            type: 'address',
            internalType: 'contract IMaverickV2Pool',
          },
          {
            name: 'minAmountSupplied',
            type: 'uint256',
            internalType: 'uint256',
          },
          {
            name: 'initialAmount',
            type: 'uint256',
            internalType: 'uint256',
          },
        ],
      },
    ],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
  },
  {
    type: 'function',
    name: 'oracleDecimals',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'priceOracle',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract IPriceOracle',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'function',
    name: 'swapRouter',
    inputs: [],
    outputs: [
      {
        name: '',
        type: 'address',
        internalType: 'contract ISwapRouter',
      },
    ],
    stateMutability: 'view',
  },
  {
    type: 'error',
    name: 'InvalidAmount',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidHealthFactor',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidLoops',
    inputs: [],
  },
  {
    type: 'error',
    name: 'InvalidTokens',
    inputs: [],
  },
  {
    type: 'error',
    name: 'MaxSlippageExceeded',
    inputs: [
      {
        name: 'amountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
      {
        name: 'minAmountOut',
        type: 'uint256',
        internalType: 'uint256',
      },
    ],
  },
] as const;

const _bytecode =
  '0x610100604052348015610010575f80fd5b506040516120a43803806120a483398101604081905261002f9161006c565b60015f556001600160a01b0393841660805291831660a05290911660c05260e0526100bc565b6001600160a01b0381168114610069575f80fd5b50565b5f805f806080858703121561007f575f80fd5b845161008a81610055565b602086015190945061009b81610055565b60408601519093506100ac81610055565b6060959095015193969295505050565b60805160a05160c05160e051611f006101a45f395f6101b301525f81816101790152818161062001528181610655015281816106b601528181611291015281816112c6015261132701525f818160df01528181610c580152610ce501525f818161013f0152818161030f01528181610426015281816104680152818161049f0152818161058601528181610958015281816109cd015281816109ff01528181610a3601528181610b0d01528181610d7201528181610e330152818161104f015281816110c4015281816110f60152818161112d015281816111f701526114ae0152611f005ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c8063a03e4bc311610063578063a03e4bc31461013a578063a92965d614610161578063c31c9c0714610174578063c886a5e81461019b578063e68b52e7146101ae575f80fd5b806307df44d0146100945780630bedd49b146100c75780632630c12f146100da578063327c047e14610119575b5f80fd5b6100a76100a2366004611a2e565b6101d5565b604080519384526020840192909252908201526060015b60405180910390f35b6100a76100d5366004611a45565b610874565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100be565b61012c610127366004611a6c565b610c35565b6040519081526020016100be565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b6100a761016f366004611aba565b610f1e565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b61012c6101a9366004611af1565b61148b565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b5f805f60025f54036102025760405162461bcd60e51b81526004016101f990611b2b565b60405180910390fd5b60025f90815560e0850135900361022c5760405163162908e360e11b815260040160405180910390fd5b61023c60a0850160808601611b62565b61ffff165f0361025f5760405163204ec41160e21b815260040160405180910390fd5b6129046102726040860160208701611b62565b61ffff1610806102965750614e206102906040860160208701611b62565b61ffff16115b156102b45760405163185cfc6d60e11b815260040160405180910390fd5b6102c46080850160608601611b83565b6001600160a01b03166102da6020860186611b83565b6001600160a01b031603610301576040516333910aef60e11b815260040160405180910390fd5b5f6103d26001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76103416020890189611b83565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865afa158015610383573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103a79190611b9e565b5161ffff80821692601083901c821692602081901c831692603082901c60ff169260409290921c1690565b5092935050505060e08501356104023330836103f160208b018b611b83565b6001600160a01b03169291906115ad565b5f805f5b61041660a08a0160808b01611b62565b61ffff1681101561078e576104637f00000000000000000000000000000000000000000000000000000000000000005f61045360208d018d611b83565b6001600160a01b0316919061161e565b6104957f00000000000000000000000000000000000000000000000000000000000000008561045360208d018d611b83565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba0376104d160208c018c611b83565b86335f6040518563ffffffff1660e01b81526004016104f39493929190611bea565b5f604051808303815f87803b15801561050a575f80fd5b505af115801561051c573d5f803e3d5ffd5b50505050838361052c9190611c2b565b92505f61056d8561054060208d018d611b83565b61055060808e0160608f01611b83565b898e60200160208101906105649190611b62565b61ffff16610c35565b9050805f0361057c575061078e565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad6105bb60808d0160608e01611b83565b8360025f336040518663ffffffff1660e01b81526004016105e0959493929190611c3e565b5f604051808303815f87803b1580156105f7575f80fd5b505af1158015610609573d5f803e3d5ffd5b5050505080836106199190611c2b565b92506106507f00000000000000000000000000000000000000000000000000000000000000005f61045360808e0160608f01611b83565b6106857f00000000000000000000000000000000000000000000000000000000000000008261045360808e0160608f01611b83565b600161069760a08c0160808d01611b62565b6106a19190611c72565b61ffff16821015610785576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a3b105ca306106ec60c08e0160a08f01611b83565b8d60400160208101906106ff9190611ca1565b6040516001600160e01b031960e086901b1681526001600160a01b039384166004820152929091166024830152156044820152606481018490525f608482015260a4016020604051808303815f875af115801561075e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107829190611cbc565b94505b50600101610406565b508760c001358210156107c15760405163593100b560e11b81526004810183905260c089013560248201526044016101f9565b5f6107d260808a0160608b01611b83565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610816573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061083a9190611cbc565b9050610861338261085160808d0160608e01611b83565b6001600160a01b03169190611736565b60015f5591989097509095509350505050565b5f805f60025f54036108985760405162461bcd60e51b81526004016101f990611b2b565b60025f908155606085013590036108c25760405163162908e360e11b815260040160405180910390fd5b6108d26060850160408601611b62565b61ffff165f036108f55760405163204ec41160e21b815260040160405180910390fd5b6129046109086040860160208701611b62565b61ffff16108061092c5750614e206109266040860160208701611b62565b61ffff16115b1561094a5760405163185cfc6d60e11b815260040160405180910390fd5b5f61098a6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76103416020890189611b83565b5092935050505060608501356109a93330836103f160208b018b611b83565b5f805f5b6109bd60608a0160408b01611b62565b61ffff16811015610baa576109fa7f00000000000000000000000000000000000000000000000000000000000000005f61045360208d018d611b83565b610a2c7f00000000000000000000000000000000000000000000000000000000000000008561045360208d018d611b83565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba037610a6860208c018c611b83565b86335f6040518563ffffffff1660e01b8152600401610a8a9493929190611bea565b5f604051808303815f87803b158015610aa1575f80fd5b505af1158015610ab3573d5f803e3d5ffd5b505050508383610ac39190611c2b565b92505f610af485610ad760208d018d611b83565b888d6020016020810190610aeb9190611b62565b61ffff1661148b565b9050805f03610b035750610baa565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad610b3f60208d018d611b83565b8360025f336040518663ffffffff1660e01b8152600401610b64959493929190611c3e565b5f604051808303815f87803b158015610b7b575f80fd5b505af1158015610b8d573d5f803e3d5ffd5b505050508083610b9d9190611c2b565b90945091506001016109ad565b505f610bb960208a018a611b83565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015610bfd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c219190611cbc565b9050610861338261085160208d018d611b83565b60405163b3596f0760e01b81526001600160a01b0385811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa158015610c9d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cc19190611cbc565b60405163b3596f0760e01b81526001600160a01b0387811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa158015610d2a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d4e9190611cbc565b60405163c44b11f760e01b81526001600160a01b0389811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015610db7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ddb9190611b9e565b80519091505f9060301c60ff16610df390600a611db3565b610e0590670de0b6b3a7640000611dbe565b610e0f908b611ddd565b60405163c44b11f760e01b81526001600160a01b038a811660048301529192505f917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa158015610e78573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e9c9190611b9e565b805190915060301c60ff165f610ecc610ebe610eb78c611766565b869061177d565b610ec78b611766565b6117b3565b90505f610ee2610edc898461177d565b886117b3565b9050670de0b6b3a7640000610ef884600a611db3565b610f029083611ddd565b610f0c9190611dbe565b9e9d5050505050505050505050505050565b5f805f60025f5403610f425760405162461bcd60e51b81526004016101f990611b2b565b60025f90815560808501359003610f6c5760405163162908e360e11b815260040160405180910390fd5b610f7c6080850160608601611b62565b61ffff165f03610f9f5760405163204ec41160e21b815260040160405180910390fd5b612904610fb26040860160208701611b62565b61ffff161080610fd65750614e20610fd06040860160208701611b62565b61ffff16115b15610ff45760405163185cfc6d60e11b815260040160405180910390fd5b6110046060850160408601611b83565b6001600160a01b031661101a6020860186611b83565b6001600160a01b031603611041576040516333910aef60e11b815260040160405180910390fd5b5f6110816001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663c44b11f76103416020890189611b83565b5092935050505060808501356110a03330836103f160208b018b611b83565b5f805f5b6110b460808a0160608b01611b62565b61ffff168110156113c8576110f17f00000000000000000000000000000000000000000000000000000000000000005f61045360208d018d611b83565b6111237f00000000000000000000000000000000000000000000000000000000000000008561045360208d018d611b83565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663617ba03761115f60208c018c611b83565b86335f6040518563ffffffff1660e01b81526004016111819493929190611bea565b5f604051808303815f87803b158015611198575f80fd5b505af11580156111aa573d5f803e3d5ffd5b5050505083836111ba9190611c2b565b92505f6111de856111ce60208d018d611b83565b61055060608e0160408f01611b83565b9050805f036111ed57506113c8565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663a415bcad61122c60608d0160408e01611b83565b8360025f336040518663ffffffff1660e01b8152600401611251959493929190611c3e565b5f604051808303815f87803b158015611268575f80fd5b505af115801561127a573d5f803e3d5ffd5b50505050808361128a9190611c2b565b92506112c17f00000000000000000000000000000000000000000000000000000000000000005f61045360608e0160408f01611b83565b6112f67f00000000000000000000000000000000000000000000000000000000000000008261045360608e0160408f01611b83565b600161130860808c0160608d01611b62565b6113129190611c72565b61ffff168210156113bf576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663522ba7eb3061135a60c08e018e611df4565b855f6040518663ffffffff1660e01b815260040161137c959493929190611e3e565b6020604051808303815f875af1158015611398573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113bc9190611cbc565b94505b506001016110a4565b508760a001358210156113fb5760405163593100b560e11b81526004810183905260a089013560248201526044016101f9565b5f61140c60608a0160408b01611b83565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015611450573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114749190611cbc565b9050610861338261085160608d0160408e01611b83565b60405163c44b11f760e01b81526001600160a01b0384811660048301525f9182917f0000000000000000000000000000000000000000000000000000000000000000169063c44b11f790602401602060405180830381865afa1580156114f3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115179190611b9e565b80519091505f9060301c60ff1661152f90600a611db3565b61154190670de0b6b3a7640000611dbe565b61154b9088611ddd565b825190915060301c60ff165f61157661156d61156689611766565b859061177d565b610ec788611766565b9050670de0b6b3a764000061158c83600a611db3565b6115969083611ddd565b6115a09190611dbe565b9998505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526116189085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117e8565b50505050565b8015806116965750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611670573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116949190611cbc565b155b6117015760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016101f9565b6040516001600160a01b03831660248201526044810182905261173190849063095ea7b360e01b906064016115e1565b505050565b6040516001600160a01b03831660248201526044810182905261173190849063a9059cbb60e01b906064016115e1565b5f61177782655af3107a4000611ddd565b92915050565b5f81156706f05b59d3b200001983900484111517611799575f80fd5b50670de0b6b3a764000091026706f05b59d3b20000010490565b5f8115670de0b6b3a7640000600284041904841117156117d1575f80fd5b50670de0b6b3a76400009190910260028204010490565b5f61183c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118b99092919063ffffffff16565b805190915015611731578080602001905181019061185a9190611e8d565b6117315760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016101f9565b60606118c784845f856118d1565b90505b9392505050565b6060824710156119325760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016101f9565b843b6119805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016101f9565b5f80866001600160a01b0316858760405161199b9190611ea8565b5f6040518083038185875af1925050503d805f81146119d5576040519150601f19603f3d011682016040523d82523d5f602084013e6119da565b606091505b50915091506119ea8282866119f5565b979650505050505050565b60608315611a045750816118ca565b825115611a145782518084602001fd5b8160405162461bcd60e51b81526004016101f99190611ebe565b5f6101008284031215611a3f575f80fd5b50919050565b5f60808284031215611a3f575f80fd5b6001600160a01b0381168114611a69575f80fd5b50565b5f805f805f60a08688031215611a80575f80fd5b853594506020860135611a9281611a55565b93506040860135611aa281611a55565b94979396509394606081013594506080013592915050565b5f60208284031215611aca575f80fd5b813567ffffffffffffffff811115611ae0575f80fd5b820160e081850312156118ca575f80fd5b5f805f8060808587031215611b04575f80fd5b843593506020850135611b1681611a55565b93969395505050506040820135916060013590565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b5f60208284031215611b72575f80fd5b813561ffff811681146118ca575f80fd5b5f60208284031215611b93575f80fd5b81356118ca81611a55565b5f60208284031215611bae575f80fd5b6040516020810181811067ffffffffffffffff82111715611bdd57634e487b7160e01b5f52604160045260245ffd5b6040529151825250919050565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561177757611777611c17565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b61ffff828116828216039080821115611c8d57611c8d611c17565b5092915050565b8015158114611a69575f80fd5b5f60208284031215611cb1575f80fd5b81356118ca81611c94565b5f60208284031215611ccc575f80fd5b5051919050565b600181815b80851115611d0d57815f1904821115611cf357611cf3611c17565b80851615611d0057918102915b93841c9390800290611cd8565b509250929050565b5f82611d2357506001611777565b81611d2f57505f611777565b8160018114611d455760028114611d4f57611d6b565b6001915050611777565b60ff841115611d6057611d60611c17565b50506001821b611777565b5060208310610133831016604e8410600b8410161715611d8e575081810a611777565b611d988383611cd3565b805f1904821115611dab57611dab611c17565b029392505050565b5f6118ca8383611d15565b5f82611dd857634e487b7160e01b5f52601260045260245ffd5b500490565b808202811582820484141761177757611777611c17565b5f808335601e19843603018112611e09575f80fd5b83018035915067ffffffffffffffff821115611e23575f80fd5b602001915036819003821315611e37575f80fd5b9250929050565b6001600160a01b03861681526080602082018190528101849052838560a08301375f60a085830101525f60a0601f19601f87011683010190508360408301528260608301529695505050505050565b5f60208284031215611e9d575f80fd5b81516118ca81611c94565b5f82518060208501845e5f920191825250919050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f8301168401019150509291505056fea164736f6c6343000819000a';

type LoopingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoopingConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Looping__factory extends ContractFactory {
  constructor(...args: LoopingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<Looping> {
    return super.deploy(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    ) as Promise<Looping>;
  }
  override getDeployTransaction(
    _aavePool: string,
    _priceOracle: string,
    _maverickV2Router: string,
    _oracleDecimals: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _aavePool,
      _priceOracle,
      _maverickV2Router,
      _oracleDecimals,
      overrides || {},
    );
  }
  override attach(address: string): Looping {
    return super.attach(address) as Looping;
  }
  override connect(signer: Signer): Looping__factory {
    return super.connect(signer) as Looping__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoopingInterface {
    return new utils.Interface(_abi) as LoopingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): Looping {
    return new Contract(address, _abi, signerOrProvider) as Looping;
  }
}
